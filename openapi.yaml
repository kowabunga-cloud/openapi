openapi: 3.1.0
info:
  contact:
    email: maintainers@kowabunga.cloud
    name: The Kowabunga Project
    url: https://www.kowabunga.cloud/
  description: Kvm Orchestrator With A BUNch of Goods Added
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.txt
  title: Kowabunga API
  version: 0.52.5
servers:
- url: /api/v1
security:
- ApiKeyAuth: []
- BearerAuth: []
tags:
- description: Everything about network adapter
  name: adapter
- description: Everything about Kowabunga remote agent
  name: agent
- description: Everything about DNS record
  name: record
- description: Everything about Kowabunga users team
  name: team
- description: Everything about virtual machine instance
  name: instance
- description: Everything about Kaktus computing node
  name: kaktus
- description: Everything about Kawaii
  name: kawaii
- description: Everything about Kawaii IPsec connection
  name: kawaii_ipsec
- description: Everything about Kiwi (Kowabunga Inner Wan Interface) provides edge-network
    services.
  name: kiwi
- description: Everything about Kompute
  name: kompute
- description: Everything about Konvey (Kowabunga Network Load-Balancer)
  name: konvey
- description: Everything about Kylo
  name: kylo
- description: Everything about project
  name: project
- description: Everything about region
  name: region
- description: Everything about NFS storage
  name: nfs
- description: Everything about storage pool
  name: pool
- description: Everything about network subnet
  name: subnet
- description: Everything about server-to-server authentication security token
  name: token
- description: Everything about image template
  name: template
- description: Everything about Kowabunga user
  name: user
- description: Everything about virtual network
  name: vnet
- description: Everything about storage volume
  name: volume
- description: Everything about availability zone
  name: zone
paths:
  /adapter:
    get:
      description: Returns the IDs of network adapter objects.
      operationId: ListAdapters
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of network adapter IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - adapter
  /adapter/{adapterId}:
    delete:
      description: Deletes an existing network adapter.
      operationId: DeleteAdapter
      parameters:
      - $ref: '#/components/parameters/AdapterID'
      responses:
        "200":
          description: The network adapter has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - adapter
    get:
      description: Returns a network adapter.
      operationId: ReadAdapter
      parameters:
      - $ref: '#/components/parameters/AdapterID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Adapter'
          description: Returns the network adapter object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - adapter
    parameters:
    - $ref: '#/components/parameters/AdapterID'
    put:
      description: Updates a network adapter configuration.
      operationId: UpdateAdapter
      parameters:
      - $ref: '#/components/parameters/AdapterID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Adapter'
        description: Adapter payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Adapter'
          description: Returns the network adapter object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - adapter
  /agent:
    get:
      description: Returns the IDs of Kowabunga remote agent objects.
      operationId: ListAgents
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kowabunga remote agent IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - agent
    post:
      description: Creates a new Kowabunga remote agent.
      operationId: CreateAgent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
        description: Agent payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: Returns the newly created Kowabunga remote agent object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - agent
  /agent/{agentId}:
    delete:
      description: Deletes an existing Kowabunga remote agent.
      operationId: DeleteAgent
      parameters:
      - $ref: '#/components/parameters/AgentID'
      responses:
        "200":
          description: The Kowabunga remote agent has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - agent
    get:
      description: Returns a Kowabunga remote agent.
      operationId: ReadAgent
      parameters:
      - $ref: '#/components/parameters/AgentID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: Returns the Kowabunga remote agent object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - agent
    parameters:
    - $ref: '#/components/parameters/AgentID'
    put:
      description: Updates a Kowabunga remote agent configuration.
      operationId: UpdateAgent
      parameters:
      - $ref: '#/components/parameters/AgentID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
        description: Agent payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: Returns the Kowabunga remote agent object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - agent
  /agent/{agentId}/token:
    parameters:
    - $ref: '#/components/parameters/AgentID'
    - $ref: '#/components/parameters/OptionalQueryExpire'
    - $ref: '#/components/parameters/OptionalQueryExpirationDate'
    patch:
      description: Performs a Kowabunga remote agent setting of API token (will replace
        any existing one).
      operationId: SetAgentApiToken
      parameters:
      - $ref: '#/components/parameters/AgentID'
      - $ref: '#/components/parameters/OptionalQueryExpire'
      - $ref: '#/components/parameters/OptionalQueryExpirationDate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: Returns the Kowabunga remote agent object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - agent
      - token
  /record/{recordId}:
    delete:
      description: Deletes an existing DNS record.
      operationId: DeleteDnsRecord
      parameters:
      - $ref: '#/components/parameters/RecordID'
      responses:
        "200":
          description: The DNS record has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - record
    get:
      description: Returns a DNS record.
      operationId: ReadDnsRecord
      parameters:
      - $ref: '#/components/parameters/RecordID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsRecord'
          description: Returns the DNS record object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - record
    parameters:
    - $ref: '#/components/parameters/RecordID'
    put:
      description: Updates a DNS record configuration.
      operationId: UpdateDnsRecord
      parameters:
      - $ref: '#/components/parameters/RecordID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnsRecord'
        description: DnsRecord payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsRecord'
          description: Returns the DNS record object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - record
  /instance:
    get:
      description: Returns the IDs of virtual machine instance objects.
      operationId: ListInstances
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of virtual machine instance IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - instance
  /instance/{instanceId}:
    delete:
      description: Deletes an existing virtual machine instance.
      operationId: DeleteInstance
      parameters:
      - $ref: '#/components/parameters/InstanceID'
      responses:
        "200":
          description: The virtual machine instance has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - instance
    get:
      description: Returns a virtual machine instance.
      operationId: ReadInstance
      parameters:
      - $ref: '#/components/parameters/InstanceID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Returns the virtual machine instance object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - instance
    parameters:
    - $ref: '#/components/parameters/InstanceID'
    put:
      description: Updates a virtual machine instance configuration.
      operationId: UpdateInstance
      parameters:
      - $ref: '#/components/parameters/InstanceID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instance'
        description: Instance payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Returns the virtual machine instance object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - instance
  /instance/{instanceId}/state:
    get:
      description: Returns a virtual machine instance state.
      operationId: ReadInstanceState
      parameters:
      - $ref: '#/components/parameters/InstanceID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceState'
          description: Returns the virtual machine instance state object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - instance
    parameters:
    - $ref: '#/components/parameters/InstanceID'
  /instance/{instanceId}/reboot:
    parameters:
    - $ref: '#/components/parameters/InstanceID'
    patch:
      description: Performs a virtual machine instance software reboot.
      operationId: RebootInstance
      parameters:
      - $ref: '#/components/parameters/InstanceID'
      responses:
        "200":
          description: The virtual machine instance software reboot is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - instance
  /instance/{instanceId}/reset:
    parameters:
    - $ref: '#/components/parameters/InstanceID'
    patch:
      description: Performs a virtual machine instance hardware reset.
      operationId: ResetInstance
      parameters:
      - $ref: '#/components/parameters/InstanceID'
      responses:
        "200":
          description: The virtual machine instance hardware reset is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - instance
  /instance/{instanceId}/suspend:
    parameters:
    - $ref: '#/components/parameters/InstanceID'
    patch:
      description: Performs a virtual machine instance software PM suspend.
      operationId: SuspendInstance
      parameters:
      - $ref: '#/components/parameters/InstanceID'
      responses:
        "200":
          description: The virtual machine instance software PM suspend is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - instance
  /instance/{instanceId}/resume:
    parameters:
    - $ref: '#/components/parameters/InstanceID'
    patch:
      description: Performs a virtual machine instance software PM resume.
      operationId: ResumeInstance
      parameters:
      - $ref: '#/components/parameters/InstanceID'
      responses:
        "200":
          description: The virtual machine instance software PM resume is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - instance
  /instance/{instanceId}/start:
    parameters:
    - $ref: '#/components/parameters/InstanceID'
    patch:
      description: Performs a virtual machine instance hardware boot-up.
      operationId: StartInstance
      parameters:
      - $ref: '#/components/parameters/InstanceID'
      responses:
        "200":
          description: The virtual machine instance hardware boot-up is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - instance
  /instance/{instanceId}/stop:
    parameters:
    - $ref: '#/components/parameters/InstanceID'
    patch:
      description: Performs a virtual machine instance hardware stop.
      operationId: StopInstance
      parameters:
      - $ref: '#/components/parameters/InstanceID'
      responses:
        "200":
          description: The virtual machine instance hardware stop is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - instance
  /instance/{instanceId}/shutdown:
    parameters:
    - $ref: '#/components/parameters/InstanceID'
    patch:
      description: Performs a virtual machine instance software shutdown.
      operationId: ShutdownInstance
      parameters:
      - $ref: '#/components/parameters/InstanceID'
      responses:
        "200":
          description: The virtual machine instance software shutdown is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - instance
  /instance/{instanceId}/connect:
    get:
      description: Returns a virtual machine instance remote access characteristics.
      operationId: ReadInstanceRemoteConnection
      parameters:
      - $ref: '#/components/parameters/InstanceID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceRemoteAccess'
          description: Returns the virtual machine instance remote access characteristics
            object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - instance
    parameters:
    - $ref: '#/components/parameters/InstanceID'
  /kaktus:
    get:
      description: Returns the IDs of Kaktus computing node objects.
      operationId: ListKaktuss
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kaktus computing node IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - kaktus
  /kaktus/{kaktusId}:
    delete:
      description: Deletes an existing Kaktus computing node.
      operationId: DeleteKaktus
      parameters:
      - $ref: '#/components/parameters/KaktusID'
      responses:
        "200":
          description: The Kaktus computing node has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kaktus
    get:
      description: Returns a Kaktus computing node.
      operationId: ReadKaktus
      parameters:
      - $ref: '#/components/parameters/KaktusID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kaktus'
          description: Returns the Kaktus computing node object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - kaktus
    parameters:
    - $ref: '#/components/parameters/KaktusID'
    put:
      description: Updates a Kaktus computing node configuration.
      operationId: UpdateKaktus
      parameters:
      - $ref: '#/components/parameters/KaktusID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kaktus'
        description: Kaktus payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kaktus'
          description: Returns the Kaktus computing node object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - kaktus
  /kaktus/{kaktusId}/caps:
    get:
      description: Returns a Kaktus computing node capability.
      operationId: ReadKaktusCaps
      parameters:
      - $ref: '#/components/parameters/KaktusID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KaktusCaps'
          description: Returns the Kaktus computing node capability object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - kaktus
    parameters:
    - $ref: '#/components/parameters/KaktusID'
  /kaktus/{kaktusId}/instances:
    get:
      description: Returns the IDs of virtual machine instance objects.
      operationId: ListKaktusInstances
      parameters:
      - $ref: '#/components/parameters/KaktusID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of virtual machine instance IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - kaktus
      - instance
    parameters:
    - $ref: '#/components/parameters/KaktusID'
  /kawaii:
    get:
      description: Returns the IDs of Kawaii objects.
      operationId: ListKawaiis
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kawaii IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - kawaii
  /kawaii/{kawaiiId}:
    delete:
      description: Deletes an existing Kawaii.
      operationId: DeleteKawaii
      parameters:
      - $ref: '#/components/parameters/KawaiiID'
      responses:
        "200":
          description: The Kawaii has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kawaii
    get:
      description: Returns a Kawaii.
      operationId: ReadKawaii
      parameters:
      - $ref: '#/components/parameters/KawaiiID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kawaii'
          description: Returns the Kawaii object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - kawaii
    parameters:
    - $ref: '#/components/parameters/KawaiiID'
    put:
      description: Updates a Kawaii configuration.
      operationId: UpdateKawaii
      parameters:
      - $ref: '#/components/parameters/KawaiiID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kawaii'
        description: Kawaii payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kawaii'
          description: Returns the Kawaii object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - kawaii
  /kawaii/{kawaiiId}/ipsec:
    get:
      description: Returns the IDs of Kawaii IPsec connection objects.
      operationId: ListKawaiiIpSecs
      parameters:
      - $ref: '#/components/parameters/KawaiiID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kawaii IPsec connection IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - kawaii
      - kawaii_ipsec
    parameters:
    - $ref: '#/components/parameters/KawaiiID'
    post:
      description: Creates a new Kawaii IPsec connection.
      operationId: CreateKawaiiIpSec
      parameters:
      - $ref: '#/components/parameters/KawaiiID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KawaiiIpSec'
        description: KawaiiIpSec payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KawaiiIpSec'
          description: Returns the newly created Kawaii IPsec connection object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - kawaii
      - kawaii_ipsec
  /kawaii/{kawaiiId}/ipsec/{KawaiiIpSecId}:
    delete:
      description: Deletes an existing Kawaii IPsec connection.
      operationId: DeleteKawaiiIpSec
      parameters:
      - $ref: '#/components/parameters/KawaiiID'
      - $ref: '#/components/parameters/KawaiiIpSecID'
      responses:
        "200":
          description: The Kawaii IPsec connection has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kawaii
      - kawaii_ipsec
    get:
      description: Returns a Kawaii IPsec connection.
      operationId: ReadKawaiiIpSec
      parameters:
      - $ref: '#/components/parameters/KawaiiID'
      - $ref: '#/components/parameters/KawaiiIpSecID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KawaiiIpSec'
          description: Returns the Kawaii IPsec connection object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - kawaii
      - kawaii_ipsec
    parameters:
    - $ref: '#/components/parameters/KawaiiID'
    - $ref: '#/components/parameters/KawaiiIpSecID'
    put:
      description: Updates a Kawaii IPsec connection configuration.
      operationId: UpdateKawaiiIpSec
      parameters:
      - $ref: '#/components/parameters/KawaiiID'
      - $ref: '#/components/parameters/KawaiiIpSecID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KawaiiIpSec'
        description: KawaiiIpSec payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KawaiiIpSec'
          description: Returns the Kawaii IPsec connection object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - kawaii
      - kawaii_ipsec
  /kiwi:
    get:
      description: Returns the IDs of Kiwi (Kowabunga Inner Wan Interface) provides
        edge-network services. objects.
      operationId: ListKiwis
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kiwi (Kowabunga Inner Wan Interface) provides
            edge-network services. IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - kiwi
  /kiwi/{kiwiId}:
    delete:
      description: Deletes an existing Kiwi (Kowabunga Inner Wan Interface) provides
        edge-network services..
      operationId: DeleteKiwi
      parameters:
      - $ref: '#/components/parameters/KiwiID'
      responses:
        "200":
          description: The Kiwi (Kowabunga Inner Wan Interface) provides edge-network
            services. has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kiwi
    get:
      description: Returns a Kiwi (Kowabunga Inner Wan Interface) provides edge-network
        services..
      operationId: ReadKiwi
      parameters:
      - $ref: '#/components/parameters/KiwiID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kiwi'
          description: Returns the Kiwi (Kowabunga Inner Wan Interface) provides edge-network
            services. object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - kiwi
    parameters:
    - $ref: '#/components/parameters/KiwiID'
    put:
      description: Updates a Kiwi (Kowabunga Inner Wan Interface) provides edge-network
        services. configuration.
      operationId: UpdateKiwi
      parameters:
      - $ref: '#/components/parameters/KiwiID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kiwi'
        description: Kiwi payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kiwi'
          description: Returns the Kiwi (Kowabunga Inner Wan Interface) provides edge-network
            services. object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - kiwi
  /kompute:
    get:
      description: Returns the IDs of Kompute objects.
      operationId: ListKomputes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kompute IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - kompute
  /kompute/{komputeId}:
    delete:
      description: Deletes an existing Kompute.
      operationId: DeleteKompute
      parameters:
      - $ref: '#/components/parameters/KomputeID'
      responses:
        "200":
          description: The Kompute has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kompute
    get:
      description: Returns a Kompute.
      operationId: ReadKompute
      parameters:
      - $ref: '#/components/parameters/KomputeID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kompute'
          description: Returns the Kompute object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - kompute
    parameters:
    - $ref: '#/components/parameters/KomputeID'
    put:
      description: Updates a Kompute configuration.
      operationId: UpdateKompute
      parameters:
      - $ref: '#/components/parameters/KomputeID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kompute'
        description: Kompute payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kompute'
          description: Returns the Kompute object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - kompute
  /kompute/{komputeId}/state:
    get:
      description: Returns a virtual machine instance state.
      operationId: ReadKomputeState
      parameters:
      - $ref: '#/components/parameters/KomputeID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceState'
          description: Returns the virtual machine instance state object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - kompute
    parameters:
    - $ref: '#/components/parameters/KomputeID'
  /kompute/{komputeId}/reboot:
    parameters:
    - $ref: '#/components/parameters/KomputeID'
    patch:
      description: Performs a Kompute software reboot.
      operationId: RebootKompute
      parameters:
      - $ref: '#/components/parameters/KomputeID'
      responses:
        "200":
          description: The Kompute software reboot is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kompute
  /kompute/{komputeId}/reset:
    parameters:
    - $ref: '#/components/parameters/KomputeID'
    patch:
      description: Performs a Kompute hardware reset.
      operationId: ResetKompute
      parameters:
      - $ref: '#/components/parameters/KomputeID'
      responses:
        "200":
          description: The Kompute hardware reset is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kompute
  /kompute/{komputeId}/suspend:
    parameters:
    - $ref: '#/components/parameters/KomputeID'
    patch:
      description: Performs a Kompute software PM suspend.
      operationId: SuspendKompute
      parameters:
      - $ref: '#/components/parameters/KomputeID'
      responses:
        "200":
          description: The Kompute software PM suspend is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kompute
  /kompute/{komputeId}/resume:
    parameters:
    - $ref: '#/components/parameters/KomputeID'
    patch:
      description: Performs a Kompute software PM resume.
      operationId: ResumeKompute
      parameters:
      - $ref: '#/components/parameters/KomputeID'
      responses:
        "200":
          description: The Kompute software PM resume is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kompute
  /kompute/{komputeId}/start:
    parameters:
    - $ref: '#/components/parameters/KomputeID'
    patch:
      description: Performs a Kompute hardware boot-up.
      operationId: StartKompute
      parameters:
      - $ref: '#/components/parameters/KomputeID'
      responses:
        "200":
          description: The Kompute hardware boot-up is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kompute
  /kompute/{komputeId}/stop:
    parameters:
    - $ref: '#/components/parameters/KomputeID'
    patch:
      description: Performs a Kompute hardware stop.
      operationId: StopKompute
      parameters:
      - $ref: '#/components/parameters/KomputeID'
      responses:
        "200":
          description: The Kompute hardware stop is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kompute
  /kompute/{komputeId}/shutdown:
    parameters:
    - $ref: '#/components/parameters/KomputeID'
    patch:
      description: Performs a Kompute software shutdown.
      operationId: ShutdownKompute
      parameters:
      - $ref: '#/components/parameters/KomputeID'
      responses:
        "200":
          description: The Kompute software shutdown is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kompute
  /konvey:
    get:
      description: Returns the IDs of Konvey (Kowabunga Network Load-Balancer) objects.
      operationId: ListKonveys
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Konvey (Kowabunga Network Load-Balancer)
            IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - konvey
  /konvey/{konveyId}:
    delete:
      description: Deletes an existing Konvey (Kowabunga Network Load-Balancer).
      operationId: DeleteKonvey
      parameters:
      - $ref: '#/components/parameters/KonveyID'
      responses:
        "200":
          description: The Konvey (Kowabunga Network Load-Balancer) has been successfully
            removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - konvey
    get:
      description: Returns a Konvey (Kowabunga Network Load-Balancer).
      operationId: ReadKonvey
      parameters:
      - $ref: '#/components/parameters/KonveyID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Konvey'
          description: Returns the Konvey (Kowabunga Network Load-Balancer) object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - konvey
    parameters:
    - $ref: '#/components/parameters/KonveyID'
    put:
      description: Updates a Konvey (Kowabunga Network Load-Balancer) configuration.
      operationId: UpdateKonvey
      parameters:
      - $ref: '#/components/parameters/KonveyID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Konvey'
        description: Konvey payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Konvey'
          description: Returns the Konvey (Kowabunga Network Load-Balancer) object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - konvey
  /kylo:
    get:
      description: Returns the IDs of Kylo objects.
      operationId: ListKylos
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kylo IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - kylo
  /kylo/{kyloId}:
    delete:
      description: Deletes an existing Kylo.
      operationId: DeleteKylo
      parameters:
      - $ref: '#/components/parameters/KyloID'
      responses:
        "200":
          description: The Kylo has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - kylo
    get:
      description: Returns a Kylo.
      operationId: ReadKylo
      parameters:
      - $ref: '#/components/parameters/KyloID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kylo'
          description: Returns the Kylo object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - kylo
    parameters:
    - $ref: '#/components/parameters/KyloID'
    put:
      description: Updates a Kylo configuration.
      operationId: UpdateKylo
      parameters:
      - $ref: '#/components/parameters/KyloID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kylo'
        description: Kylo payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kylo'
          description: Returns the Kylo object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - kylo
  /project:
    get:
      description: Returns the IDs of project objects.
      operationId: ListProjects
      parameters:
      - $ref: '#/components/parameters/OptionalQuerySubnetSize'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of project IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - project
    parameters:
    - $ref: '#/components/parameters/OptionalQuerySubnetSize'
    post:
      description: Creates a new project.
      operationId: CreateProject
      parameters:
      - $ref: '#/components/parameters/OptionalQuerySubnetSize'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        description: Project payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Returns the newly created project object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - project
  /project/{projectId}:
    delete:
      description: Deletes an existing project.
      operationId: DeleteProject
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      responses:
        "200":
          description: The project has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - project
    get:
      description: Returns a project.
      operationId: ReadProject
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Returns the project object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - project
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    put:
      description: Updates a project configuration.
      operationId: UpdateProject
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        description: Project payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Returns the project object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - project
  /project/{projectId}/cost:
    get:
      description: Returns a resource cost.
      operationId: ReadProjectCost
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cost'
          description: Returns the resource cost object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - project
    parameters:
    - $ref: '#/components/parameters/ProjectID'
  /project/{projectId}/usage:
    get:
      description: Returns a global project resource quotas/usage (0 for unlimited).
      operationId: ReadProjectUsage
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResources'
          description: Returns the global project resource quotas/usage (0 for unlimited)
            object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - project
    parameters:
    - $ref: '#/components/parameters/ProjectID'
  /project/{projectId}/record:
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    post:
      description: Creates a new DNS record.
      operationId: CreateProjectDnsRecord
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnsRecord'
        description: DnsRecord payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsRecord'
          description: Returns the newly created DNS record object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - project
      - record
  /project/{projectId}/records:
    get:
      description: Returns the IDs of DNS record objects.
      operationId: ListProjectDnsRecords
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of DNS record IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - project
      - record
    parameters:
    - $ref: '#/components/parameters/ProjectID'
  /project/{projectId}/region/{regionId}/volume:
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/RegionID'
    - $ref: '#/components/parameters/OptionalQueryPoolID'
    - $ref: '#/components/parameters/OptionalQueryTemplateID'
    post:
      description: Creates a new storage volume.
      operationId: CreateProjectRegionVolume
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RegionID'
      - $ref: '#/components/parameters/OptionalQueryPoolID'
      - $ref: '#/components/parameters/OptionalQueryTemplateID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Volume'
        description: Volume payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
          description: Returns the newly created storage volume object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - project
      - region
      - volume
  /project/{projectId}/region/{regionId}/volumes:
    get:
      description: Returns the IDs of storage volume objects.
      operationId: ListProjectRegionVolumes
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RegionID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of storage volume IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - project
      - region
      - volume
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/RegionID'
  /project/{projectId}/zone/{zoneId}/instance:
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/ZoneID'
    post:
      description: Creates a new virtual machine instance.
      operationId: CreateProjectZoneInstance
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/ZoneID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instance'
        description: Instance payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Returns the newly created virtual machine instance object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - project
      - zone
      - instance
  /project/{projectId}/zone/{zoneId}/instances:
    get:
      description: Returns the IDs of virtual machine instance objects.
      operationId: ListProjectZoneInstances
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/ZoneID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of virtual machine instance IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - project
      - zone
      - instance
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/ZoneID'
  /project/{projectId}/zone/{zoneId}/kompute:
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/ZoneID'
    - $ref: '#/components/parameters/OptionalQueryPoolID'
    - $ref: '#/components/parameters/OptionalQueryTemplateID'
    - $ref: '#/components/parameters/OptionalQueryKomputePublic'
    post:
      description: Creates a new Kompute.
      operationId: CreateProjectZoneKompute
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/ZoneID'
      - $ref: '#/components/parameters/OptionalQueryPoolID'
      - $ref: '#/components/parameters/OptionalQueryTemplateID'
      - $ref: '#/components/parameters/OptionalQueryKomputePublic'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kompute'
        description: Kompute payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kompute'
          description: Returns the newly created Kompute object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - project
      - zone
      - kompute
  /project/{projectId}/zone/{zoneId}/komputes:
    get:
      description: Returns the IDs of Kompute objects.
      operationId: ListProjectZoneKomputes
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/ZoneID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kompute IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - project
      - zone
      - kompute
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/ZoneID'
  /project/{projectId}/region/{regionId}/kylo:
    get:
      description: Returns the IDs of Kylo objects.
      operationId: ListProjectRegionKylos
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RegionID'
      - $ref: '#/components/parameters/OptionalQueryNfsID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kylo IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - project
      - region
      - kylo
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/RegionID'
    - $ref: '#/components/parameters/OptionalQueryNfsID'
    post:
      description: Creates a new Kylo.
      operationId: CreateProjectRegionKylo
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RegionID'
      - $ref: '#/components/parameters/OptionalQueryNfsID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kylo'
        description: Kylo payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kylo'
          description: Returns the newly created Kylo object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - project
      - region
      - kylo
  /project/{projectId}/region/{regionId}/kawaii:
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/RegionID'
    post:
      description: Creates a new Kawaii.
      operationId: CreateProjectRegionKawaii
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RegionID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kawaii'
        description: Kawaii payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kawaii'
          description: Returns the newly created Kawaii object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - project
      - region
      - kawaii
  /project/{projectId}/region/{regionId}/kawaiis:
    get:
      description: Returns the IDs of Kawaii objects.
      operationId: ListProjectRegionKawaiis
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RegionID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kawaii IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - project
      - region
      - kawaii
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/RegionID'
  /project/{projectId}/zone/{zoneId}/konvey:
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/ZoneID'
    post:
      description: Creates a new Konvey (Kowabunga Network Load-Balancer).
      operationId: CreateProjectZoneKonvey
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/ZoneID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Konvey'
        description: Konvey payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Konvey'
          description: Returns the newly created Konvey (Kowabunga Network Load-Balancer)
            object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - project
      - zone
      - konvey
  /project/{projectId}/zone/{zoneId}/konveys:
    get:
      description: Returns the IDs of Konvey (Kowabunga Network Load-Balancer) objects.
      operationId: ListProjectZoneKonveys
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/ZoneID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Konvey (Kowabunga Network Load-Balancer)
            IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - project
      - zone
      - konvey
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/ZoneID'
  /project/{projectId}/region/{regionId}/konvey:
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/RegionID'
    post:
      description: Creates a new Konvey (Kowabunga Network Load-Balancer).
      operationId: CreateProjectRegionKonvey
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RegionID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Konvey'
        description: Konvey payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Konvey'
          description: Returns the newly created Konvey (Kowabunga Network Load-Balancer)
            object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - project
      - region
      - konvey
  /project/{projectId}/region/{regionId}/konveys:
    get:
      description: Returns the IDs of Konvey (Kowabunga Network Load-Balancer) objects.
      operationId: ListProjectRegionKonveys
      parameters:
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RegionID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Konvey (Kowabunga Network Load-Balancer)
            IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - project
      - region
      - konvey
    parameters:
    - $ref: '#/components/parameters/ProjectID'
    - $ref: '#/components/parameters/RegionID'
  /region:
    get:
      description: Returns the IDs of region objects.
      operationId: ListRegions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of region IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - region
    post:
      description: Creates a new region.
      operationId: CreateRegion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        description: Region payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: Returns the newly created region object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - region
  /region/{regionId}:
    delete:
      description: Deletes an existing region.
      operationId: DeleteRegion
      parameters:
      - $ref: '#/components/parameters/RegionID'
      responses:
        "200":
          description: The region has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - region
    get:
      description: Returns a region.
      operationId: ReadRegion
      parameters:
      - $ref: '#/components/parameters/RegionID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: Returns the region object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - region
    parameters:
    - $ref: '#/components/parameters/RegionID'
    put:
      description: Updates a region configuration.
      operationId: UpdateRegion
      parameters:
      - $ref: '#/components/parameters/RegionID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        description: Region payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: Returns the region object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - region
  /region/{regionId}/zone:
    parameters:
    - $ref: '#/components/parameters/RegionID'
    post:
      description: Creates a new availability zone.
      operationId: CreateZone
      parameters:
      - $ref: '#/components/parameters/RegionID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
        description: Zone payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
          description: Returns the newly created availability zone object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - region
      - zone
  /region/{regionId}/zones:
    get:
      description: Returns the IDs of availability zone objects.
      operationId: ListRegionZones
      parameters:
      - $ref: '#/components/parameters/RegionID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of availability zone IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - region
      - zone
    parameters:
    - $ref: '#/components/parameters/RegionID'
  /region/{regionId}/pool:
    parameters:
    - $ref: '#/components/parameters/RegionID'
    post:
      description: Creates a new storage pool.
      operationId: CreateStoragePool
      parameters:
      - $ref: '#/components/parameters/RegionID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoragePool'
        description: StoragePool payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePool'
          description: Returns the newly created storage pool object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - region
      - pool
  /region/{regionId}/kiwi:
    parameters:
    - $ref: '#/components/parameters/RegionID'
    post:
      description: Creates a new Kiwi (Kowabunga Inner Wan Interface) provides edge-network
        services..
      operationId: CreateKiwi
      parameters:
      - $ref: '#/components/parameters/RegionID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kiwi'
        description: Kiwi payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kiwi'
          description: Returns the newly created Kiwi (Kowabunga Inner Wan Interface)
            provides edge-network services. object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - region
      - kiwi
  /region/{regionId}/kiwis:
    get:
      description: Returns the IDs of Kiwi (Kowabunga Inner Wan Interface) provides
        edge-network services. objects.
      operationId: ListRegionKiwis
      parameters:
      - $ref: '#/components/parameters/RegionID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kiwi (Kowabunga Inner Wan Interface) provides
            edge-network services. IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - region
      - kiwi
    parameters:
    - $ref: '#/components/parameters/RegionID'
  /region/{regionId}/vnet:
    parameters:
    - $ref: '#/components/parameters/RegionID'
    post:
      description: Creates a new virtual network.
      operationId: CreateVNet
      parameters:
      - $ref: '#/components/parameters/RegionID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VNet'
        description: VNet payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VNet'
          description: Returns the newly created virtual network object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - region
      - vnet
  /region/{regionId}/vnets:
    get:
      description: Returns the IDs of virtual network objects.
      operationId: ListRegionVNets
      parameters:
      - $ref: '#/components/parameters/RegionID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of virtual network IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - region
      - vnet
    parameters:
    - $ref: '#/components/parameters/RegionID'
  /region/{regionId}/pool/{poolId}/default:
    parameters:
    - $ref: '#/components/parameters/RegionID'
    - $ref: '#/components/parameters/PoolID'
    patch:
      description: Performs a region setting of default storage pool.
      operationId: SetRegionDefaultStoragePool
      parameters:
      - $ref: '#/components/parameters/RegionID'
      - $ref: '#/components/parameters/PoolID'
      responses:
        "200":
          description: The region setting of default storage pool is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - region
      - pool
  /region/{regionId}/pools:
    get:
      description: Returns the IDs of storage pool objects.
      operationId: ListRegionStoragePools
      parameters:
      - $ref: '#/components/parameters/RegionID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of storage pool IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - region
      - pool
    parameters:
    - $ref: '#/components/parameters/RegionID'
  /region/{regionId}/nfs:
    get:
      description: Returns the IDs of NFS storage objects.
      operationId: ListRegionStorageNFSs
      parameters:
      - $ref: '#/components/parameters/RegionID'
      - $ref: '#/components/parameters/OptionalQueryPoolID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of NFS storage IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - region
      - nfs
    parameters:
    - $ref: '#/components/parameters/RegionID'
    - $ref: '#/components/parameters/OptionalQueryPoolID'
    post:
      description: Creates a new NFS storage.
      operationId: CreateStorageNFS
      parameters:
      - $ref: '#/components/parameters/RegionID'
      - $ref: '#/components/parameters/OptionalQueryPoolID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageNFS'
        description: StorageNFS payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageNFS'
          description: Returns the newly created NFS storage object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - region
      - nfs
  /region/{regionId}/nfs/{nfsId}/default:
    parameters:
    - $ref: '#/components/parameters/RegionID'
    - $ref: '#/components/parameters/NfsID'
    patch:
      description: Performs a region setting of default NFS storage.
      operationId: SetRegionDefaultStorageNFS
      parameters:
      - $ref: '#/components/parameters/RegionID'
      - $ref: '#/components/parameters/NfsID'
      responses:
        "200":
          description: The region setting of default NFS storage is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - region
      - nfs
  /nfs:
    get:
      description: Returns the IDs of NFS storage objects.
      operationId: ListStorageNFSs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of NFS storage IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - nfs
  /nfs/{nfsId}:
    delete:
      description: Deletes an existing NFS storage.
      operationId: DeleteStorageNFS
      parameters:
      - $ref: '#/components/parameters/NfsID'
      responses:
        "200":
          description: The NFS storage has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - nfs
    get:
      description: Returns a NFS storage.
      operationId: ReadStorageNFS
      parameters:
      - $ref: '#/components/parameters/NfsID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageNFS'
          description: Returns the NFS storage object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - nfs
    parameters:
    - $ref: '#/components/parameters/NfsID'
    put:
      description: Updates a NFS storage configuration.
      operationId: UpdateStorageNFS
      parameters:
      - $ref: '#/components/parameters/NfsID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageNFS'
        description: StorageNFS payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageNFS'
          description: Returns the NFS storage object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - nfs
  /nfs/{nfsId}/kylo:
    get:
      description: Returns the IDs of Kylo objects.
      operationId: ListStorageNFSKylos
      parameters:
      - $ref: '#/components/parameters/NfsID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kylo IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - nfs
      - kylo
    parameters:
    - $ref: '#/components/parameters/NfsID'
  /pool:
    get:
      description: Returns the IDs of storage pool objects.
      operationId: ListStoragePools
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of storage pool IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - pool
  /pool/{poolId}:
    delete:
      description: Deletes an existing storage pool.
      operationId: DeleteStoragePool
      parameters:
      - $ref: '#/components/parameters/PoolID'
      responses:
        "200":
          description: The storage pool has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - pool
    get:
      description: Returns a storage pool.
      operationId: ReadStoragePool
      parameters:
      - $ref: '#/components/parameters/PoolID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePool'
          description: Returns the storage pool object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - pool
    parameters:
    - $ref: '#/components/parameters/PoolID'
    put:
      description: Updates a storage pool configuration.
      operationId: UpdateStoragePool
      parameters:
      - $ref: '#/components/parameters/PoolID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoragePool'
        description: StoragePool payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePool'
          description: Returns the storage pool object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - pool
  /pool/{poolId}/volumes:
    get:
      description: Returns the IDs of storage volume objects.
      operationId: ListStoragePoolVolumes
      parameters:
      - $ref: '#/components/parameters/PoolID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of storage volume IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - pool
      - volume
    parameters:
    - $ref: '#/components/parameters/PoolID'
  /pool/{poolId}/template:
    parameters:
    - $ref: '#/components/parameters/PoolID'
    post:
      description: Creates a new image template.
      operationId: CreateTemplate
      parameters:
      - $ref: '#/components/parameters/PoolID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
        description: Template payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: Returns the newly created image template object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - pool
      - template
  /pool/{poolId}/template/{templateId}/default:
    parameters:
    - $ref: '#/components/parameters/PoolID'
    - $ref: '#/components/parameters/TemplateID'
    patch:
      description: Performs a storage pool setting of default template.
      operationId: SetStoragePoolDefaultTemplate
      parameters:
      - $ref: '#/components/parameters/PoolID'
      - $ref: '#/components/parameters/TemplateID'
      responses:
        "200":
          description: The storage pool setting of default template is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - pool
      - template
  /pool/{poolId}/templates:
    get:
      description: Returns the IDs of image template objects.
      operationId: ListStoragePoolTemplates
      parameters:
      - $ref: '#/components/parameters/PoolID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of image template IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - pool
      - template
    parameters:
    - $ref: '#/components/parameters/PoolID'
  /subnet:
    get:
      description: Returns the IDs of network subnet objects.
      operationId: ListSubnets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of network subnet IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - subnet
  /subnet/{subnetId}:
    delete:
      description: Deletes an existing network subnet.
      operationId: DeleteSubnet
      parameters:
      - $ref: '#/components/parameters/SubnetID'
      responses:
        "200":
          description: The network subnet has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - subnet
    get:
      description: Returns a network subnet.
      operationId: ReadSubnet
      parameters:
      - $ref: '#/components/parameters/SubnetID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subnet'
          description: Returns the network subnet object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - subnet
    parameters:
    - $ref: '#/components/parameters/SubnetID'
    put:
      description: Updates a network subnet configuration.
      operationId: UpdateSubnet
      parameters:
      - $ref: '#/components/parameters/SubnetID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subnet'
        description: Subnet payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subnet'
          description: Returns the network subnet object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - subnet
  /subnet/{subnetId}/adapter:
    parameters:
    - $ref: '#/components/parameters/SubnetID'
    - $ref: '#/components/parameters/OptionalQueryAssignIP'
    post:
      description: Creates a new network adapter.
      operationId: CreateAdapter
      parameters:
      - $ref: '#/components/parameters/SubnetID'
      - $ref: '#/components/parameters/OptionalQueryAssignIP'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Adapter'
        description: Adapter payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Adapter'
          description: Returns the newly created network adapter object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - subnet
      - adapter
  /subnet/{subnetId}/adapters:
    get:
      description: Returns the IDs of network adapter objects.
      operationId: ListSubnetAdapters
      parameters:
      - $ref: '#/components/parameters/SubnetID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of network adapter IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - subnet
      - adapter
    parameters:
    - $ref: '#/components/parameters/SubnetID'
  /team:
    get:
      description: Returns the IDs of Kowabunga users team objects.
      operationId: ListTeams
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kowabunga users team IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - team
    post:
      description: Creates a new Kowabunga users team.
      operationId: CreateTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: Team payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Returns the newly created Kowabunga users team object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - team
  /team/{teamId}:
    delete:
      description: Deletes an existing Kowabunga users team.
      operationId: DeleteTeam
      parameters:
      - $ref: '#/components/parameters/TeamID'
      responses:
        "200":
          description: The Kowabunga users team has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - team
    get:
      description: Returns a Kowabunga users team.
      operationId: ReadTeam
      parameters:
      - $ref: '#/components/parameters/TeamID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Returns the Kowabunga users team object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - team
    parameters:
    - $ref: '#/components/parameters/TeamID'
    put:
      description: Updates a Kowabunga users team configuration.
      operationId: UpdateTeam
      parameters:
      - $ref: '#/components/parameters/TeamID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: Team payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Returns the Kowabunga users team object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - team
  /template:
    get:
      description: Returns the IDs of image template objects.
      operationId: ListTemplates
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of image template IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - template
  /template/{templateId}:
    delete:
      description: Deletes an existing image template.
      operationId: DeleteTemplate
      parameters:
      - $ref: '#/components/parameters/TemplateID'
      responses:
        "200":
          description: The image template has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - template
    get:
      description: Returns a image template.
      operationId: ReadTemplate
      parameters:
      - $ref: '#/components/parameters/TemplateID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: Returns the image template object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - template
    parameters:
    - $ref: '#/components/parameters/TemplateID'
    put:
      description: Updates a image template configuration.
      operationId: UpdateTemplate
      parameters:
      - $ref: '#/components/parameters/TemplateID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
        description: Template payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: Returns the image template object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - template
  /token:
    get:
      description: Returns the IDs of server-to-server authentication security token
        objects.
      operationId: ListApiTokens
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of server-to-server authentication security
            token IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - token
  /token/{tokenId}:
    delete:
      description: Deletes an existing server-to-server authentication security token.
      operationId: DeleteApiToken
      parameters:
      - $ref: '#/components/parameters/TokenID'
      responses:
        "200":
          description: The server-to-server authentication security token has been
            successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - token
    get:
      description: Returns a server-to-server authentication security token.
      operationId: ReadApiToken
      parameters:
      - $ref: '#/components/parameters/TokenID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: Returns the server-to-server authentication security token
            object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - token
    parameters:
    - $ref: '#/components/parameters/TokenID'
    put:
      description: Updates a server-to-server authentication security token configuration.
      operationId: UpdateApiToken
      parameters:
      - $ref: '#/components/parameters/TokenID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiToken'
        description: ApiToken payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: Returns the server-to-server authentication security token
            object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - token
  /login:
    post:
      description: Creates a new Kowabunga user login credentials.
      operationId: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        description: UserCredentials payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCredentials'
          description: Returns the newly created Kowabunga user login credentials
            object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - user
  /logout:
    post:
      description: Creates a new Kowabunga user logout session.
      operationId: Logout
      responses:
        "204":
          description: Kowabunga user logout session has been created.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - user
  /resetPassword:
    put:
      description: "Updates a Kowabunga userreset of password for the provided email\
        \ (server-side generated, will replace any existing one) configuration."
      operationId: ResetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmail'
        description: UserEmail payload.
        required: true
      responses:
        "200":
          description: "The Kowabunga userreset of password for the provided email\
            \ (server-side generated, will replace any existing one) has been updated."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - user
  /user:
    get:
      description: Returns the IDs of Kowabunga user objects.
      operationId: ListUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kowabunga user IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - user
    post:
      description: Creates a new Kowabunga user.
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Returns the newly created Kowabunga user object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - user
  /user/{userId}:
    delete:
      description: Deletes an existing Kowabunga user.
      operationId: DeleteUser
      parameters:
      - $ref: '#/components/parameters/UserID'
      responses:
        "200":
          description: The Kowabunga user has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - user
    get:
      description: Returns a Kowabunga user.
      operationId: ReadUser
      parameters:
      - $ref: '#/components/parameters/UserID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Returns the Kowabunga user object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - user
    parameters:
    - $ref: '#/components/parameters/UserID'
    put:
      description: Updates a Kowabunga user configuration.
      operationId: UpdateUser
      parameters:
      - $ref: '#/components/parameters/UserID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Returns the Kowabunga user object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - user
  /user/{userId}/password:
    parameters:
    - $ref: '#/components/parameters/UserID'
    put:
      description: Updates a Kowabunga user password (will replace any existing one)
        configuration.
      operationId: SetUserPassword
      parameters:
      - $ref: '#/components/parameters/UserID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Password'
        description: Password payload.
        required: true
      responses:
        "200":
          description: The Kowabunga user password (will replace any existing one)
            has been updated.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - user
  /user/{userId}/resetPassword:
    parameters:
    - $ref: '#/components/parameters/UserID'
    patch:
      description: "Performs a Kowabunga user reset of password (server-side generated,\
        \ will replace any existing one)."
      operationId: ResetUserPassword
      parameters:
      - $ref: '#/components/parameters/UserID'
      responses:
        "200":
          description: "The Kowabunga user reset of password (server-side generated,\
            \ will replace any existing one) is successful."
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - user
  /user/{userId}/token:
    parameters:
    - $ref: '#/components/parameters/UserID'
    - $ref: '#/components/parameters/OptionalQueryExpire'
    - $ref: '#/components/parameters/OptionalQueryExpirationDate'
    patch:
      description: Performs a Kowabunga user setting of API token (will replace any
        existing one).
      operationId: SetUserApiToken
      parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/OptionalQueryExpire'
      - $ref: '#/components/parameters/OptionalQueryExpirationDate'
      responses:
        "200":
          description: The Kowabunga user setting of API token (will replace any existing
            one) is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - user
      - token
  /vnet:
    get:
      description: Returns the IDs of virtual network objects.
      operationId: ListVNets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of virtual network IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - vnet
  /vnet/{vnetId}:
    delete:
      description: Deletes an existing virtual network.
      operationId: DeleteVNet
      parameters:
      - $ref: '#/components/parameters/VnetID'
      responses:
        "200":
          description: The virtual network has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - vnet
    get:
      description: Returns a virtual network.
      operationId: ReadVNet
      parameters:
      - $ref: '#/components/parameters/VnetID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VNet'
          description: Returns the virtual network object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - vnet
    parameters:
    - $ref: '#/components/parameters/VnetID'
    put:
      description: Updates a virtual network configuration.
      operationId: UpdateVNet
      parameters:
      - $ref: '#/components/parameters/VnetID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VNet'
        description: VNet payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VNet'
          description: Returns the virtual network object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - vnet
  /vnet/{vnetId}/subnet:
    parameters:
    - $ref: '#/components/parameters/VnetID'
    post:
      description: Creates a new network subnet.
      operationId: CreateSubnet
      parameters:
      - $ref: '#/components/parameters/VnetID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subnet'
        description: Subnet payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subnet'
          description: Returns the newly created network subnet object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - vnet
      - subnet
  /vnet/{vnetId}/subnet/{subnetId}/default:
    parameters:
    - $ref: '#/components/parameters/VnetID'
    - $ref: '#/components/parameters/SubnetID'
    patch:
      description: Performs a virtual network setting of default network subnet.
      operationId: SetVNetDefaultSubnet
      parameters:
      - $ref: '#/components/parameters/VnetID'
      - $ref: '#/components/parameters/SubnetID'
      responses:
        "200":
          description: The virtual network setting of default network subnet is successful.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - vnet
      - subnet
  /vnet/{vnetId}/subnets:
    get:
      description: Returns the IDs of network subnet objects.
      operationId: ListVNetSubnets
      parameters:
      - $ref: '#/components/parameters/VnetID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of network subnet IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - vnet
      - subnet
    parameters:
    - $ref: '#/components/parameters/VnetID'
  /volume:
    get:
      description: Returns the IDs of storage volume objects.
      operationId: ListVolumes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of storage volume IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - volume
  /volume/{volumeId}:
    delete:
      description: Deletes an existing storage volume.
      operationId: DeleteVolume
      parameters:
      - $ref: '#/components/parameters/VolumeID'
      responses:
        "200":
          description: The storage volume has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - volume
    get:
      description: Returns a storage volume.
      operationId: ReadVolume
      parameters:
      - $ref: '#/components/parameters/VolumeID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
          description: Returns the storage volume object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - volume
    parameters:
    - $ref: '#/components/parameters/VolumeID'
    put:
      description: Updates a storage volume configuration.
      operationId: UpdateVolume
      parameters:
      - $ref: '#/components/parameters/VolumeID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Volume'
        description: Volume payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
          description: Returns the storage volume object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - volume
  /zone:
    get:
      description: Returns the IDs of availability zone objects.
      operationId: ListZones
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of availability zone IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      tags:
      - zone
  /zone/{zoneId}:
    delete:
      description: Deletes an existing availability zone.
      operationId: DeleteZone
      parameters:
      - $ref: '#/components/parameters/ZoneID'
      responses:
        "200":
          description: The availability zone has been successfully removed.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      tags:
      - zone
    get:
      description: Returns a availability zone.
      operationId: ReadZone
      parameters:
      - $ref: '#/components/parameters/ZoneID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
          description: Returns the availability zone object.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - zone
    parameters:
    - $ref: '#/components/parameters/ZoneID'
    put:
      description: Updates a availability zone configuration.
      operationId: UpdateZone
      parameters:
      - $ref: '#/components/parameters/ZoneID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
        description: Zone payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
          description: Returns the availability zone object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - zone
  /zone/{zoneId}/kaktus:
    parameters:
    - $ref: '#/components/parameters/ZoneID'
    post:
      description: Creates a new Kaktus computing node.
      operationId: CreateKaktus
      parameters:
      - $ref: '#/components/parameters/ZoneID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kaktus'
        description: Kaktus payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kaktus'
          description: Returns the newly created Kaktus computing node object.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "507":
          $ref: '#/components/responses/InsufficientResource'
      tags:
      - zone
      - kaktus
  /zone/{zoneId}/kaktuses:
    get:
      description: Returns the IDs of Kaktus computing node objects.
      operationId: ListZoneKaktuses
      parameters:
      - $ref: '#/components/parameters/ZoneID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIds'
          description: Returns an array of Kaktus computing node IDs.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
      tags:
      - zone
      - kaktus
    parameters:
    - $ref: '#/components/parameters/ZoneID'
components:
  parameters:
    AdapterID:
      description: The ID of the network adapter.
      explode: false
      in: path
      name: adapterId
      required: true
      schema:
        type: string
      style: simple
    AgentID:
      description: The ID of the Kowabunga remote agent.
      explode: false
      in: path
      name: agentId
      required: true
      schema:
        type: string
      style: simple
    RecordID:
      description: The ID of the DNS record.
      explode: false
      in: path
      name: recordId
      required: true
      schema:
        type: string
      style: simple
    InstanceID:
      description: The ID of the virtual machine instance.
      explode: false
      in: path
      name: instanceId
      required: true
      schema:
        type: string
      style: simple
    KaktusID:
      description: The ID of the Kaktus computing node.
      explode: false
      in: path
      name: kaktusId
      required: true
      schema:
        type: string
      style: simple
    KawaiiID:
      description: The ID of the Kawaii.
      explode: false
      in: path
      name: kawaiiId
      required: true
      schema:
        type: string
      style: simple
    KawaiiIpSecID:
      description: The ID of the Kawaii IPsec connection.
      explode: false
      in: path
      name: KawaiiIpSecId
      required: true
      schema:
        type: string
      style: simple
    KiwiID:
      description: The ID of the Kiwi (Kowabunga Inner Wan Interface) provides edge-network
        services..
      explode: false
      in: path
      name: kiwiId
      required: true
      schema:
        type: string
      style: simple
    KomputeID:
      description: The ID of the Kompute.
      explode: false
      in: path
      name: komputeId
      required: true
      schema:
        type: string
      style: simple
    OptionalQueryKomputePublic:
      description: "Should Kompute be exposed over public Internet ? (a public IPv4\
        \ address will then be auto-assigned, default to false)."
      explode: true
      in: query
      name: public
      required: false
      schema:
        type: boolean
      style: form
    KonveyID:
      description: The ID of the Konvey (Kowabunga Network Load-Balancer).
      explode: false
      in: path
      name: konveyId
      required: true
      schema:
        type: string
      style: simple
    KyloID:
      description: The ID of the Kylo.
      explode: false
      in: path
      name: kyloId
      required: true
      schema:
        type: string
      style: simple
    ProjectID:
      description: The ID of the project.
      explode: false
      in: path
      name: projectId
      required: true
      schema:
        type: string
      style: simple
    RegionID:
      description: The ID of the region.
      explode: false
      in: path
      name: regionId
      required: true
      schema:
        type: string
      style: simple
    NfsID:
      description: The ID of the NFS storage.
      explode: false
      in: path
      name: nfsId
      required: true
      schema:
        type: string
      style: simple
    OptionalQueryNfsID:
      description: "NFS storage ID (optional, region's default if unspecified)."
      explode: true
      in: query
      name: nfsId
      required: false
      schema:
        type: string
      style: form
    PoolID:
      description: The ID of the storage pool.
      explode: false
      in: path
      name: poolId
      required: true
      schema:
        type: string
      style: simple
    OptionalQueryPoolID:
      description: "Storage pool ID (optional, region's default if unspecified)."
      explode: true
      in: query
      name: poolId
      required: false
      schema:
        type: string
      style: form
    SubnetID:
      description: The ID of the network subnet.
      explode: false
      in: path
      name: subnetId
      required: true
      schema:
        type: string
      style: simple
    OptionalQueryAssignIP:
      description: Whether Kowabunga should pick and assign an IP address to this
        adapter.
      explode: true
      in: query
      name: assignIP
      required: false
      schema:
        type: boolean
      style: form
    OptionalQuerySubnetSize:
      description: "The minimum VPC subnet size to be affected to the project. WARNING,\
        \ this cannot be changed later."
      explode: true
      in: query
      name: subnetSize
      required: false
      schema:
        type: integer
      style: form
    TeamID:
      description: The ID of the Kowabunga users team.
      explode: false
      in: path
      name: teamId
      required: true
      schema:
        type: string
      style: simple
    TemplateID:
      description: The ID of the image template.
      explode: false
      in: path
      name: templateId
      required: true
      schema:
        type: string
      style: simple
    OptionalQueryTemplateID:
      description: "Template to clone the storage volume from (optional, region's\
        \ default if unspecified)."
      explode: true
      in: query
      name: templateId
      required: false
      schema:
        type: string
      style: form
    TokenID:
      description: The ID of the server-to-server authentication security token.
      explode: false
      in: path
      name: tokenId
      required: true
      schema:
        type: string
      style: simple
    OptionalQueryExpire:
      description: Whether or not the token should expire.
      explode: true
      in: query
      name: expire
      required: false
      schema:
        type: boolean
      style: form
    OptionalQueryExpirationDate:
      description: Token's expiration date (YYYY-MM-DD format).
      explode: true
      in: query
      name: expiration_date
      required: false
      schema:
        format: date
        type: string
      style: form
    UserID:
      description: The ID of the Kowabunga user.
      explode: false
      in: path
      name: userId
      required: true
      schema:
        type: string
      style: simple
    VnetID:
      description: The ID of the virtual network.
      explode: false
      in: path
      name: vnetId
      required: true
      schema:
        type: string
      style: simple
    VolumeID:
      description: The ID of the storage volume.
      explode: false
      in: path
      name: volumeId
      required: true
      schema:
        type: string
      style: simple
    ZoneID:
      description: The ID of the availability zone.
      explode: false
      in: path
      name: zoneId
      required: true
      schema:
        type: string
      style: simple
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorBadRequest'
      description: "BadRequest error: Bad request (wrong input parameters)."
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorUnauthorized'
      description: "Unauthorized error: Unauthorized resource access (wrong auth/credentials)."
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorForbidden'
      description: "Forbidden error: Forbidden resource access (restricted access\
        \ control)."
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorNotFound'
      description: "NotFound error: Specified resource does not exist."
    Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorConflict'
      description: "Conflict error: A similar resource already exists or resource\
        \ is still being referenced somewhere."
    UnprocessableEntity:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorUnprocessableEntity'
      description: "UnprocessableEntity error: Server can't process request."
    InsufficientResource:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorInsufficientResource'
      description: "InsufficientResource error: Server can't allocate resources (logical\
        \ quotas or physical limits hit)."
  schemas:
    Adapter:
      description: A network adapter.
      example:
        addresses:
        - addresses
        - addresses
        reserved: false
        name: name
        description: description
        id: id
        mac: mac
      properties:
        id:
          description: The network adapter ID (auto-generated).
          type: string
        name:
          description: The network adapter name.
          type: string
        description:
          description: The network adapter description.
          type: string
        mac:
          description: The network adapter hardware address (e.g. 00:11:22:33:44:55).
            Auto-generated if unspecified.
          type: string
        addresses:
          description: The network adapter list of associated IPv4 addresses.
          items:
            type: string
          type: array
        reserved:
          default: false
          description: "The network adapter is a reserved adapter (e.g. router), where\
            \ the same hardware address can be reused over several subnets."
          type: boolean
      required:
      - name
    Agent:
      description: A Kowabunga remote agent.
      example:
        name: name
        description: description
        id: id
        type: Kiwi
      properties:
        id:
          description: The Kowabunga remote agent ID (auto-generated).
          type: string
        name:
          description: The Kowabunga remote agent name.
          type: string
        description:
          description: The Kowabunga remote agent description.
          type: string
        type:
          description: The Kowabunga agent type.
          enum:
          - Kiwi
          - Kaktus
          type: string
      required:
      - name
      - type
    Cost:
      description: A resource cost.
      example:
        price: 0.8008282
        currency: currency
      properties:
        price:
          description: The unit price information.
          format: float
          type: number
        currency:
          description: The associated currency.
          type: string
      required:
      - currency
      - price
    DnsRecord:
      description: A DNS record.
      example:
        addresses:
        - addresses
        - addresses
        domain: domain
        name: name
        description: description
        id: id
      properties:
        id:
          description: The DNS record ID (auto-generated).
          type: string
        name:
          description: The DNS record name.
          type: string
        description:
          description: The DNS record description.
          type: string
        domain:
          description: The DNS record associated domain (inherited from associated
            project).
          type: string
        addresses:
          description: A list of IPv4 addresses to be associated to the record.
          items:
            type: string
          type: array
      required:
      - addresses
      - name
    ApiErrorBadRequest:
      example:
        reason: server_side_details
        error: Bad request (wrong input parameters).
        status: 400
      properties:
        status:
          example: 400
          format: int32
          type: integer
        error:
          example: Bad request (wrong input parameters).
          type: string
        reason:
          example: server_side_details
          type: string
      required:
      - error
      - reason
      - status
    ApiErrorUnauthorized:
      example:
        reason: server_side_details
        error: Unauthorized resource access (wrong auth/credentials).
        status: 401
      properties:
        status:
          example: 401
          format: int32
          type: integer
        error:
          example: Unauthorized resource access (wrong auth/credentials).
          type: string
        reason:
          example: server_side_details
          type: string
      required:
      - error
      - reason
      - status
    ApiErrorForbidden:
      example:
        reason: server_side_details
        error: Forbidden resource access (restricted access control).
        status: 403
      properties:
        status:
          example: 403
          format: int32
          type: integer
        error:
          example: Forbidden resource access (restricted access control).
          type: string
        reason:
          example: server_side_details
          type: string
      required:
      - error
      - reason
      - status
    ApiErrorNotFound:
      example:
        reason: server_side_details
        error: Specified resource does not exist.
        status: 404
      properties:
        status:
          example: 404
          format: int32
          type: integer
        error:
          example: Specified resource does not exist.
          type: string
        reason:
          example: server_side_details
          type: string
      required:
      - error
      - reason
      - status
    ApiErrorConflict:
      example:
        reason: server_side_details
        error: A similar resource already exists or resource is still being referenced
          somewhere.
        status: 409
      properties:
        status:
          example: 409
          format: int32
          type: integer
        error:
          example: A similar resource already exists or resource is still being referenced
            somewhere.
          type: string
        reason:
          example: server_side_details
          type: string
      required:
      - error
      - reason
      - status
    ApiErrorUnprocessableEntity:
      example:
        reason: server_side_details
        error: Server can't process request.
        status: 422
      properties:
        status:
          example: 422
          format: int32
          type: integer
        error:
          example: Server can't process request.
          type: string
        reason:
          example: server_side_details
          type: string
      required:
      - error
      - reason
      - status
    ApiErrorInsufficientResource:
      example:
        reason: server_side_details
        error: Server can't allocate resources (logical quotas or physical limits
          hit).
        status: 507
      properties:
        status:
          example: 507
          format: int32
          type: integer
        error:
          example: Server can't allocate resources (logical quotas or physical limits
            hit).
          type: string
        reason:
          example: server_side_details
          type: string
      required:
      - error
      - reason
      - status
    ObjectIds:
      description: A list of resource IDs.
      items:
        type: string
      type: array
    Password:
      description: A user plain-text password.
      example:
        value: value
      properties:
        value:
          description: The plain-text password.
          type: string
      required:
      - value
    Instance:
      description: A virtual machine instance.
      example:
        memory: 0
        adapters:
        - adapters
        - adapters
        name: name
        volumes:
        - volumes
        - volumes
        description: description
        id: id
        vcpus: 6
      properties:
        id:
          description: The virtual machine instance ID (auto-generated).
          type: string
        name:
          description: The virtual machine instance name.
          type: string
        description:
          description: The virtual machine instance description.
          type: string
        memory:
          description: The virtual machine instance memory size (in bytes).
          format: int64
          type: integer
        vcpus:
          description: The virtual machine instance number of vCPUs.
          format: int64
          type: integer
        adapters:
          description: a list of existing network adapters to be connected to the
            instance.
          items:
            type: string
          type: array
        volumes:
          description: volumes list of existing storage volumes (i.e. disks) to be
            connected to the instance.
          items:
            type: string
          type: array
      required:
      - memory
      - name
      - vcpus
    InstanceState:
      description: A virtual machine instance state.
      example:
        reason: reason
        state: state
      properties:
        state:
          description: The virtual machine instance state.
          type: string
        reason:
          description: The virtual machine instance reason of the state.
          type: string
      required:
      - reason
      - state
    InstanceRemoteAccess:
      description: A virtual machine instance remote access characteristics.
      example:
        url: url
      properties:
        url:
          description: The virtual machine instance remote access URL.
          type: string
      required:
      - url
    Kaktus:
      description: A Kaktus (Kowabunga Affordable KVM and Tight Underneath Storage)
        is an hyper-converged infrastructure (HCI) bare-metal node offering computing
        and distributed storage capabilites.
      example:
        memory_cost:
          price: 0.8008282
          currency: currency
        name: name
        description: description
        overcommit_memory_ratio: 1
        cpu_cost:
          price: 0.8008282
          currency: currency
        id: id
        overcommit_cpu_ratio: 6
        agents:
        - agents
        - agents
      properties:
        id:
          description: The Kaktus computing node ID (auto-generated).
          type: string
        name:
          description: The Kaktus computing node name.
          type: string
        description:
          description: The Kaktus computing node description.
          type: string
        cpu_cost:
          $ref: '#/components/schemas/Cost'
        memory_cost:
          $ref: '#/components/schemas/Cost'
        overcommit_cpu_ratio:
          default: 3
          description: The Kaktus node CPU resource over-commit ratio. Overcommitting
            CPU resources for VMs means allocating more virtual CPUs (vCPUs) to the
            virtual machines (VMs) than the physical cores available on the node.
            This can help optimize the utilization of the node CPU and increase the
            density of VMs per node.
          format: int64
          type: integer
        overcommit_memory_ratio:
          default: 2
          description: "The Kaktus node memory resource over-commit ratio. Memory\
            \ overcommitment is a concept in computing that covers the assignment\
            \ of more memory to virtual computing devices (or processes) than the\
            \ physical machine they are hosted, or running on, actually has."
          format: int64
          type: integer
        agents:
          description: a list of existing remote agents managing the Kaktus node.
          items:
            type: string
          type: array
      required:
      - agents
      - name
    KaktusCaps:
      description: A Kaktus computing node capability.
      example:
        memory: 5
        cpu:
          cores: 6
          vendor: vendor
          threads: 1
          model: model
          arch: arch
          sockets: 0
      properties:
        cpu:
          $ref: '#/components/schemas/KaktusCPU'
        memory:
          description: The Kaktus computing node memory size (bytes).
          format: int64
          type: integer
      required:
      - cpu
      - memory
    KaktusCPU:
      description: A Kaktus computing node CPU characteristics.
      example:
        cores: 6
        vendor: vendor
        threads: 1
        model: model
        arch: arch
        sockets: 0
      properties:
        arch:
          description: The Kaktus computing node CPU architecture.
          type: string
        model:
          description: The Kaktus computing node CPU model.
          type: string
        vendor:
          description: The Kaktus computing node CPU vendor.
          type: string
        sockets:
          description: The Kaktus computing node CPU number of sockets.
          format: int64
          type: integer
        cores:
          description: The Kaktus computing node CPU number of cores.
          format: int64
          type: integer
        threads:
          description: The Kaktus computing node CPU number of threads.
          format: int64
          type: integer
      required:
      - arch
      - cores
      - model
      - sockets
      - threads
      - vendor
    Kawaii:
      description: A Kawaii (Kowabunga Adapative WAn Intelligent Interface) is a network
        gateway used for your Internet inbound and outbound traffic.
      example:
        ipsec_connections:
        - pre_shared_key: pre_shared_key
          phase1_dh_group_number: 0
          phase1_encryption_algorithm: AES128
          phase2_encryption_algorithm: AES128
          ip: ip
          phase1_integrity_algorithm: SHA1
          phase1_lifetime: 1h
          description: description
          dpd_timeout: 240s
          dpd_timeout_action: restart
          start_action: start
          rekey_time: 2h
          remote_ip: remote_ip
          phase2_lifetime: 1h
          phase2_dh_group_number: 6
          firewall:
            ingress:
            - protocol: tcp
              source: 0.0.0.0/0
              ports: ports
            - protocol: tcp
              source: 0.0.0.0/0
              ports: ports
            egress_policy: accept
            egress:
            - protocol: tcp
              destination: 0.0.0.0/0
              ports: ports
            - protocol: tcp
              destination: 0.0.0.0/0
              ports: ports
          name: name
          phase2_integrity_algorithm: SHA1
          remote_subnet: remote_subnet
          id: id
        - pre_shared_key: pre_shared_key
          phase1_dh_group_number: 0
          phase1_encryption_algorithm: AES128
          phase2_encryption_algorithm: AES128
          ip: ip
          phase1_integrity_algorithm: SHA1
          phase1_lifetime: 1h
          description: description
          dpd_timeout: 240s
          dpd_timeout_action: restart
          start_action: start
          rekey_time: 2h
          remote_ip: remote_ip
          phase2_lifetime: 1h
          phase2_dh_group_number: 6
          firewall:
            ingress:
            - protocol: tcp
              source: 0.0.0.0/0
              ports: ports
            - protocol: tcp
              source: 0.0.0.0/0
              ports: ports
            egress_policy: accept
            egress:
            - protocol: tcp
              destination: 0.0.0.0/0
              ports: ports
            - protocol: tcp
              destination: 0.0.0.0/0
              ports: ports
          name: name
          phase2_integrity_algorithm: SHA1
          remote_subnet: remote_subnet
          id: id
        dnat:
        - protocol: tcp
          destination: destination
          ports: ports
        - protocol: tcp
          destination: destination
          ports: ports
        firewall:
          ingress:
          - protocol: tcp
            source: 0.0.0.0/0
            ports: ports
          - protocol: tcp
            source: 0.0.0.0/0
            ports: ports
          egress_policy: accept
          egress:
          - protocol: tcp
            destination: 0.0.0.0/0
            ports: ports
          - protocol: tcp
            destination: 0.0.0.0/0
            ports: ports
        name: name
        description: description
        netip:
          private:
          - private
          - private
          public:
          - public
          - public
          zones:
          - private: private
            public: public
            zone: zone
          - private: private
            public: public
            zone: zone
        id: id
        vpc_peerings:
        - subnet: subnet
          ingress:
          - protocol: tcp
            ports: ports
          - protocol: tcp
            ports: ports
          netip:
          - private: private
            zone: zone
          - private: private
            zone: zone
          policy: drop
          egress:
          - protocol: tcp
            ports: ports
          - protocol: tcp
            ports: ports
        - subnet: subnet
          ingress:
          - protocol: tcp
            ports: ports
          - protocol: tcp
            ports: ports
          netip:
          - private: private
            zone: zone
          - private: private
            zone: zone
          policy: drop
          egress:
          - protocol: tcp
            ports: ports
          - protocol: tcp
            ports: ports
      properties:
        id:
          description: The Kawaii ID (auto-generated).
          type: string
        name:
          description: The Kawaii name.
          type: string
        description:
          description: The Kawaii description.
          type: string
        netip:
          $ref: '#/components/schemas/KawaiiNetIp'
        firewall:
          $ref: '#/components/schemas/KawaiiFirewall'
        dnat:
          description: The Kawaii list of NAT forwarding entries. Kawaii will forward
            public Internet traffic from all public virtual IPs to requested private
            subnet IP addresses.
          items:
            $ref: '#/components/schemas/KawaiiDNatRule'
          type: array
        vpc_peerings:
          description: The Kawaii list of Kowabunga private VPC subnet peering entries.
          items:
            $ref: '#/components/schemas/KawaiiVpcPeering'
          type: array
        ipsec_connections:
          description: The Kawaii list of Kowabunga IPsec connections.
          items:
            $ref: '#/components/schemas/KawaiiIpSec'
          type: array
    KawaiiNetIp:
      description: A Kawaii Network IP settings.
      example:
        private:
        - private
        - private
        public:
        - public
        - public
        zones:
        - private: private
          public: public
          zone: zone
        - private: private
          public: public
          zone: zone
      properties:
        public:
          description: The Kawaii global public gateways virtual IP addresses (read-only).
          items:
            type: string
          type: array
        private:
          description: The Kawaii global private gateways virtual IP addresses (read-only).
          items:
            type: string
          type: array
        zones:
          description: The Kawaii per-zone list of Kowabunga virtual IP addresses.
          items:
            $ref: '#/components/schemas/KawaiiNetIpZone'
          type: array
      required:
      - private
      - public
      - zones
    KawaiiNetIpZone:
      description: A Kawaii Network IP zone settings.
      example:
        private: private
        public: public
        zone: zone
      properties:
        zone:
          description: The Kawaii zone name (read-only).
          type: string
        public:
          description: The Kawaii zone gateway public virtual IP (read-only).
          type: string
        private:
          description: The Kawaii zone gateway private virtual IP (read-only).
          type: string
      required:
      - private
      - public
      - zone
    KawaiiFirewall:
      description: A Kawaii public firewall settings.
      example:
        ingress:
        - protocol: tcp
          source: 0.0.0.0/0
          ports: ports
        - protocol: tcp
          source: 0.0.0.0/0
          ports: ports
        egress_policy: accept
        egress:
        - protocol: tcp
          destination: 0.0.0.0/0
          ports: ports
        - protocol: tcp
          destination: 0.0.0.0/0
          ports: ports
      properties:
        ingress:
          description: "The Kawaii public firewall list of ingress rules. Kawaii default\
            \ policy is to drop all incoming traffic, including ICMP. Specified ruleset\
            \ will be explicitly accepted."
          items:
            $ref: '#/components/schemas/KawaiiFirewallIngressRule'
          type: array
        egress_policy:
          default: accept
          description: The default public traffic egress policy.
          enum:
          - accept
          - drop
          type: string
        egress:
          description: "The Kawaii public firewall list of egress rules. Kawaii default\
            \ policy is to accept all outgoing traffic, including ICMP. Specified\
            \ ruleset will be explicitly dropped if egress_policy is set to accept,\
            \ and explicitly accepted if egress policy is set to drop.."
          items:
            $ref: '#/components/schemas/KawaiiFirewallEgressRule'
          type: array
    KawaiiFirewallIngressRule:
      description: A Kawaii public firewall ingress rule.
      example:
        protocol: tcp
        source: 0.0.0.0/0
        ports: ports
      properties:
        source:
          default: 0.0.0.0/0
          description: The source IP or CIDR to accept public traffic from.
          type: string
        protocol:
          default: tcp
          description: The transport layer protocol to accept public traffic from.
          enum:
          - tcp
          - udp
          type: string
        ports:
          description: "The port (or list of ports) to accept public traffic from.\
            \ Ranges are accepted. Format is a-b,c-d (e.g. 443; 22,80,443; 80,443,3000-3005)."
          type: string
      required:
      - ports
    KawaiiFirewallEgressRule:
      description: A Kawaii public firewall egress rule.
      example:
        protocol: tcp
        destination: 0.0.0.0/0
        ports: ports
      properties:
        destination:
          default: 0.0.0.0/0
          description: The destination IP or CIDR to accept/drop public traffic to.
          type: string
        protocol:
          default: tcp
          description: The transport layer protocol to accept/drop public traffic
            to.
          enum:
          - tcp
          - udp
          type: string
        ports:
          description: "The port (or list of ports) to accept/drop public traffic\
            \ from. Ranges are accepted. Format is a-b,c-d (e.g. 443; 22,80,443; 80,443,3000-3005)."
          type: string
      required:
      - ports
    KawaiiDNatRule:
      description: A Kawaii public firewall destination NAT rule.
      example:
        protocol: tcp
        destination: destination
        ports: ports
      properties:
        destination:
          description: Target private IP address to forward public traffic to.
          type: string
        protocol:
          default: tcp
          description: The transport layer protocol to forward public traffic to.
          enum:
          - tcp
          - udp
          type: string
        ports:
          description: "The port (or list of ports) to forward public traffic from.\
            \ Ranges are accepted. Format is a-b,c-d (e.g. 443; 22,80,443; 80,443,3000-3005)."
          type: string
      required:
      - destination
      - ports
    KawaiiVpcPeering:
      description: A Kawaii internal VPC subnet peering.
      example:
        subnet: subnet
        ingress:
        - protocol: tcp
          ports: ports
        - protocol: tcp
          ports: ports
        netip:
        - private: private
          zone: zone
        - private: private
          zone: zone
        policy: drop
        egress:
        - protocol: tcp
          ports: ports
        - protocol: tcp
          ports: ports
      properties:
        subnet:
          description: Kowabunga Subnet ID to be peered with (subnet local IP addresses
            will be automatically assigned to Kawaii instances)..
          type: string
        policy:
          default: drop
          description: The default VPC traffic forwarding policy.
          enum:
          - accept
          - drop
          type: string
        ingress:
          description: The firewall list of forwarding ingress rules from VPC peered
            subnet. ICMP traffic is always accepted. The specified ruleset will be
            explicitly accepted if drop is the default policy (useless otherwise).
          items:
            $ref: '#/components/schemas/KawaiiVpcForwardRule'
          type: array
        egress:
          description: The firewall list of forwarding egress rules to VPC peered
            subnet. ICMP traffic is always accepted. The specified ruleset will be
            explicitly accepted if drop is the default policy (useless otherwise).
          items:
            $ref: '#/components/schemas/KawaiiVpcForwardRule'
          type: array
        netip:
          description: The per-zone auto-assigned private IPs in peered subnet (read-only).
          items:
            $ref: '#/components/schemas/KawaiiVpcNetIpZone'
          type: array
      required:
      - subnet
    KawaiiVpcForwardRule:
      description: A Kawaii VPC firewall forwarding rule.
      example:
        protocol: tcp
        ports: ports
      properties:
        protocol:
          default: tcp
          description: The transport layer protocol to forward public traffic to.
          enum:
          - tcp
          - udp
          type: string
        ports:
          description: "The port (or list of ports) to forward public traffic from.\
            \ Ranges are accepted. Format is a-b,c-d (e.g. 443; 22,80,443; 80,443,3000-3005)."
          type: string
      required:
      - ports
    KawaiiVpcNetIpZone:
      description: A Kawaii VPC Network IP zone settings.
      example:
        private: private
        zone: zone
      properties:
        zone:
          description: The Kawaii zone name (read-only).
          type: string
        private:
          description: The Kawaii zone gateway private IP address in VPC peered subnet  (read-only).
          type: string
      required:
      - private
      - zone
    KawaiiIpSec:
      description: A Kawaii IPsec connection.
      example:
        pre_shared_key: pre_shared_key
        phase1_dh_group_number: 0
        phase1_encryption_algorithm: AES128
        phase2_encryption_algorithm: AES128
        ip: ip
        phase1_integrity_algorithm: SHA1
        phase1_lifetime: 1h
        description: description
        dpd_timeout: 240s
        dpd_timeout_action: restart
        start_action: start
        rekey_time: 2h
        remote_ip: remote_ip
        phase2_lifetime: 1h
        phase2_dh_group_number: 6
        firewall:
          ingress:
          - protocol: tcp
            source: 0.0.0.0/0
            ports: ports
          - protocol: tcp
            source: 0.0.0.0/0
            ports: ports
          egress_policy: accept
          egress:
          - protocol: tcp
            destination: 0.0.0.0/0
            ports: ports
          - protocol: tcp
            destination: 0.0.0.0/0
            ports: ports
        name: name
        phase2_integrity_algorithm: SHA1
        remote_subnet: remote_subnet
        id: id
      properties:
        id:
          description: The Kawaii IPsec connection ID (auto-generated).
          type: string
        name:
          description: The Kawaii IPsec connection name.
          type: string
        description:
          description: The Kawaii IPsec connection description.
          type: string
        ip:
          description: The Kawaii IPsec connection IPSec IP.
          type: string
        remote_ip:
          description: The Kawaii IPsec connection remote peer VPN Gateway.
          type: string
        remote_subnet:
          description: The Kawaii IPsec connection remote subnet.
          type: string
        pre_shared_key:
          description: The Kawaii IPsec connection pre-shared key(PSK).
          type: string
        dpd_timeout_action:
          default: restart
          description: "The Kawaii IPsec connection Dead Peer Detection Action (clear,restart\
            \ or trap)."
          enum:
          - clear
          - restart
          - start
          type: string
        dpd_timeout:
          default: 240s
          description: The Kawaii IPsec connection Dead Peer Detection Timeout.
          type: string
        start_action:
          default: start
          description: "The Kawaii IPsec connection start action (none, start, trap)."
          enum:
          - none
          - start
          - trap
          type: string
        rekey_time:
          default: 2h
          description: The Kawaii IPsec connection rekey time. Default is 2h.
          type: string
        phase1_lifetime:
          default: 1h
          description: The Kawaii IPsec connection Lifetime for phase 1 negociation.
            Default is 1h.
          type: string
        phase1_dh_group_number:
          description: The Kawaii IPsec connection phase 1 Diffie Hellman IANA algorithm.
          enum:
          - 2
          - 5
          - 14
          - 15
          - 16
          - 17
          - 18
          - 19
          - 20
          - 21
          - 22
          - 23
          - 24
          format: int64
          type: integer
        phase1_integrity_algorithm:
          description: The Kawaii IPsec connection phase 1 integrity algorithm..
          enum:
          - SHA1
          - SHA256
          - SHA384
          - SHA512
          type: string
        phase1_encryption_algorithm:
          description: The Kawaii IPsec connection phase 1 encryption algorithm..
          enum:
          - AES128
          - AES256
          - CAMELLIA128
          - CAMELLIA256
          type: string
        phase2_lifetime:
          default: 1h
          description: The Kawaii IPsec connection Lifetime for phase 2 negociation.
            Default is 1h.
          type: string
        phase2_dh_group_number:
          description: The Kawaii IPsec connection phase 2 Diffie Hellman IANA algorithm.
          enum:
          - 2
          - 5
          - 14
          - 15
          - 16
          - 17
          - 18
          - 19
          - 20
          - 21
          - 22
          - 23
          - 24
          format: int64
          type: integer
        phase2_integrity_algorithm:
          description: The Kawaii IPsec connection phase 2 integrity algorithm..
          enum:
          - SHA1
          - SHA256
          - SHA384
          - SHA512
          type: string
        phase2_encryption_algorithm:
          description: The Kawaii IPsec connection phase 2 encryption algorithm..
          enum:
          - AES128
          - AES256
          - CAMELLIA128
          - CAMELLIA256
          type: string
        firewall:
          $ref: '#/components/schemas/KawaiiFirewall'
      required:
      - name
      - phase1_dh_group_number
      - phase1_encryption_algorithm
      - phase1_integrity_algorithm
      - phase2_dh_group_number
      - phase2_encryption_algorithm
      - phase2_integrity_algorithm
      - pre_shared_key
      - remote_ip
      - remote_subnet
    Kiwi:
      description: A Kiwi (Kowabunga Inner Wan Interface) provides edge-network services..
      example:
        name: name
        description: description
        id: id
        agents:
        - agents
        - agents
      properties:
        id:
          description: The Kiwi (Kowabunga Inner Wan Interface) provides edge-network
            services. ID (auto-generated).
          type: string
        name:
          description: The Kiwi (Kowabunga Inner Wan Interface) provides edge-network
            services. name.
          type: string
        description:
          description: The Kiwi (Kowabunga Inner Wan Interface) provides edge-network
            services. description.
          type: string
        agents:
          description: a list of existing remote agents managing the network gateway.
          items:
            type: string
          type: array
      required:
      - name
    Kompute:
      description: "A Kompute is a wrapper object for bare virtual machines. It consists\
        \ of an instance, one to several attached volumes and 2 network adapters (a\
        \ private one, a public one). This is the prefered way for creating virtual\
        \ machines. IP addresses will be automatically assigned."
      example:
        disk: 1
        data_disk: 5
        memory: 0
        ip: ip
        name: name
        description: description
        id: id
        vcpus: 6
      properties:
        id:
          description: The Kompute ID (auto-generated).
          type: string
        name:
          description: The Kompute name.
          type: string
        description:
          description: The Kompute description.
          type: string
        memory:
          description: The Kompute memory size (in bytes).
          format: int64
          type: integer
        vcpus:
          description: The Kompute number of vCPUs.
          format: int64
          type: integer
        disk:
          description: The Kompute OS disk size (in bytes).
          format: int64
          type: integer
        data_disk:
          default: 0
          description: "The Kompute extra data disk size (in bytes). If unspecified,\
            \ no extra data disk will be assigned."
          format: int64
          type: integer
        ip:
          description: The Kompute assigned private IPv4 address (read-only).
          type: string
      required:
      - disk
      - memory
      - name
      - vcpus
    Konvey:
      description: A Kowabunga Konvey is a layer-4 network load-balancer used to distribute
        service requests to associated backend instances.
      example:
        endpoints:
        - protocol: tcp
          port: 0
          name: name
          backends:
            port: 6
            hosts:
            - hosts
            - hosts
        - protocol: tcp
          port: 0
          name: name
          backends:
            port: 6
            hosts:
            - hosts
            - hosts
        failover: true
        name: name
        description: description
        id: id
        vip: vip
      properties:
        id:
          description: The Konvey (Kowabunga Network Load-Balancer) ID (auto-generated).
          type: string
        name:
          description: The Konvey (Kowabunga Network Load-Balancer) name.
          type: string
        description:
          description: The Konvey (Kowabunga Network Load-Balancer) description.
          type: string
        vip:
          description: The Konvey (Kowabunga Network Load-Balancer) assigned private
            virtual IP address (read-only).
          type: string
        failover:
          default: true
          description: Whether Konvey (Kowabunga Network Load-Balancer) must be deployed
            in a highly-available replicated state to support service failover.
          type: boolean
        endpoints:
          description: The Konvey (Kowabunga Network Load-Balancer) list of load-balanced
            endpoints.
          items:
            $ref: '#/components/schemas/KonveyEndpoint'
          type: array
      required:
      - endpoints
    KonveyEndpoint:
      description: A Konvey Endpoint Service settings.
      example:
        protocol: tcp
        port: 0
        name: name
        backends:
          port: 6
          hosts:
          - hosts
          - hosts
      properties:
        name:
          description: The Konvey (Kowabunga Network Load-Balancer) endpoint name.
          type: string
        port:
          description: The port to be exposed.
          format: int64
          type: integer
        protocol:
          default: tcp
          description: The transport layer protocol to be exposed.
          enum:
          - tcp
          - udp
          type: string
        backends:
          $ref: '#/components/schemas/KonveyBackends'
      required:
      - backends
      - name
      - port
      - protocol
    KonveyBackends:
      description: A Konvey Backends settings.
      example:
        port: 6
        hosts:
        - hosts
        - hosts
      properties:
        hosts:
          description: The Konvey (Kowabunga Network Load-Balancer) endpoint list
            of load-balanced backend hosts.
          items:
            type: string
          type: array
        port:
          description: The Konvey (Kowabunga Network Load-Balancer) endpoint backend
            service port.
          format: int64
          type: integer
      required:
      - hosts
      - port
    Kylo:
      description: A Kylo provides an elastic NFS-like remote storage volume.
      example:
        endpoint: endpoint
        access: RW
        size: 6
        name: name
        description: description
        id: id
        protocols:
        - 0
        - 0
      properties:
        id:
          description: The Kylo ID (auto-generated).
          type: string
        name:
          description: The Kylo name.
          type: string
        description:
          description: The Kylo description.
          type: string
        access:
          default: RW
          description: The Kylo volume access type.
          enum:
          - RO
          - RW
          type: string
        protocols:
          default:
          - 3
          - 4
          description: The Kylo NFS protocol versions to be supported.
          items:
            enum:
            - 3
            - 4
            type: integer
          type: array
        endpoint:
          description: The Kylo endpoint FQDN (read-only).
          type: string
        size:
          description: The Kylo volume bytes used (read-only).
          format: int64
          type: integer
      required:
      - name
    Metadata:
      description: A key/value metadata.
      example:
        value: value
        key: key
      properties:
        key:
          description: The metadata key.
          type: string
        value:
          description: The metadata value.
          type: string
      required:
      - key
      - value
    Project:
      description: "A Kowabunga project corresponds to a single tenant, isolated set\
        \ of resources."
      example:
        quotas:
          memory: 6
          instances: 5
          storage: 1
          vcpus: 0
        regions:
        - regions
        - regions
        teams:
        - teams
        - teams
        metadatas:
        - value: value
          key: key
        - value: value
          key: key
        root_password: root_password
        description: description
        bootstrap_user: bootstrap_user
        tags:
        - tags
        - tags
        reserved_vrrp_ids:
        - 5
        - 5
        bootstrap_pubkey: bootstrap_pubkey
        private_subnets:
        - value: value
          key: key
        - value: value
          key: key
        domain: domain
        name: name
        id: id
      properties:
        id:
          description: The project ID (auto-generated).
          type: string
        name:
          description: The project name.
          type: string
        description:
          description: The project description.
          type: string
        domain:
          description: Internal domain name (e.g. myproject.acme.com).
          type: string
        root_password:
          description: "Default root password, set at cloud-init instance bootstrap\
            \ phase. Will be randomly auto-generated at each instance creation if\
            \ unspecified."
          type: string
        bootstrap_user:
          description: "Default service user name, created at cloud-init instance\
            \ bootstrap phase. Will use Kowabunga's default configuration one if unspecified."
          type: string
        bootstrap_pubkey:
          description: "Default public SSH key, to be associated to bootstrap user.\
            \ Will use Kowabunga's default configuration one if unspecified."
          type: string
        tags:
          description: A list of tags to be associated to the project.
          items:
            type: string
          type: array
        metadatas:
          description: A list of metadata to be associated to the project.
          items:
            $ref: '#/components/schemas/Metadata'
          type: array
        quotas:
          $ref: '#/components/schemas/ProjectResources'
        private_subnets:
          description: The assigned project VPC private subnets IDs (read-only).
          items:
            $ref: '#/components/schemas/RegionSubnet'
          type: array
        reserved_vrrp_ids:
          description: "The list of VRRP IDs used by -as-a-service resources within\
            \ the project virtual network (read-only). Should your application use\
            \ VRRP for service redundancy, you should use different IDs to prevent\
            \ issues.."
          items:
            type: integer
          type: array
        teams:
          description: A list of user teams allowed to administrate the project (i.e.
            capable of managing internal resources).
          items:
            type: string
          type: array
        regions:
          description: A list of Kowabunga regions the project is managing resources
            from.
          items:
            type: string
          type: array
      required:
      - name
      - regions
      - teams
    ProjectResources:
      description: A global project resource quotas/usage (0 for unlimited).
      example:
        memory: 6
        instances: 5
        storage: 1
        vcpus: 0
      properties:
        vcpus:
          description: The maximum total number of vCPUs allowed to be consumed by
            sum of all instances.
          format: int32
          type: integer
        memory:
          description: The maximum total memory (in bytes) allowed to be consumed
            by sum of all instances.
          format: int64
          type: integer
        storage:
          description: The maximum total disk capacity allowed to be consumed by sum
            of all instances.
          format: int64
          type: integer
        instances:
          description: The maximum number of instances allowed to be spawned.
          format: int32
          type: integer
    Region:
      description: A region.
      example:
        name: name
        description: description
        id: id
      properties:
        id:
          description: The region ID (auto-generated).
          type: string
        name:
          description: The region name.
          type: string
        description:
          description: The region description.
          type: string
      required:
      - name
    StorageNFS:
      description: A NFS storage.
      example:
        endpoint: endpoint
        port: 0
        name: name
        description: description
        id: id
        fs: nfs
        backends:
        - backends
        - backends
      properties:
        id:
          description: The NFS storage ID (auto-generated).
          type: string
        name:
          description: The NFS storage name.
          type: string
        description:
          description: The NFS storage description.
          type: string
        endpoint:
          description: The associated NFS endpoint FQDN.
          type: string
        fs:
          default: nfs
          description: The underlying associated Ceph volume name.
          type: string
        backends:
          description: List of NFS Ganesha API server IP addresses.
          items:
            type: string
          type: array
        port:
          default: 54934
          description: NFS Ganesha API server port (default 54934).
          format: int64
          type: integer
      required:
      - endpoint
      - name
    StoragePool:
      description: A storage pool.
      example:
        ceph_secret_uuid: ceph_secret_uuid
        cost:
          price: 0.8008282
          currency: currency
        name: name
        pool: pool
        ceph_port: 0
        description: description
        id: id
        ceph_address: localhost
        agents:
        - agents
        - agents
      properties:
        id:
          description: The storage pool ID (auto-generated).
          type: string
        name:
          description: The storage pool name.
          type: string
        description:
          description: The storage pool description.
          type: string
        pool:
          description: Ceph pool name.
          type: string
        ceph_address:
          default: localhost
          description: Ceph Monitor(s) address or FQDN.
          type: string
        ceph_port:
          default: 3300
          description: Ceph Monitor(s) port (default 3300).
          format: int64
          type: integer
        ceph_secret_uuid:
          description: The libvirt secret UUID for CephX authentication.
          type: string
        cost:
          $ref: '#/components/schemas/Cost'
        agents:
          description: a list of existing remote agents managing the storage pool.
          items:
            type: string
          type: array
      required:
      - agents
      - name
      - pool
    Subnet:
      description: A network subnet.
      example:
        extra_routes:
        - extra_routes
        - extra_routes
        application: user
        reserved:
        - last: last
          first: first
        - last: last
          first: first
        name: name
        dns: dns
        description: description
        cidr: cidr
        gw_pool:
        - last: last
          first: first
        - last: last
          first: first
        id: id
        gateway: gateway
      properties:
        id:
          description: The network subnet ID (auto-generated).
          type: string
        name:
          description: The network subnet name.
          type: string
        description:
          description: The network subnet description.
          type: string
        cidr:
          description: The network subnet CIDR (e.g. 192.168.0.0/24).
          type: string
        gateway:
          description: The network subnet router/gateway IP address (e.g. 192.168.0.254).
          type: string
        dns:
          description: The network subnet DNS server IP address (gateway value if
            unspecified).
          type: string
        extra_routes:
          description: The list of extra routes to be access through designated gateway
            (format is 10.0.0.0/8).
          items:
            type: string
          type: array
        reserved:
          description: The network subnet reserved IPv4 ranges (i.e. no IP address
            can be assigned from there).
          items:
            $ref: '#/components/schemas/IpRange'
          type: array
        gw_pool:
          description: The network subnet IPv4 ranges reserved for per-zone local
            network gateways (range size must be at least equal to region number of
            zones).
          items:
            $ref: '#/components/schemas/IpRange'
          type: array
        application:
          default: user
          description: Optional application service type.
          enum:
          - ceph
          - user
          type: string
      required:
      - cidr
      - gateway
      - name
    IpRange:
      description: "A reserved IPv4 addresses pool range, non-addressable by Kowabunga."
      example:
        last: last
        first: first
      properties:
        first:
          description: The range's first IP address.
          type: string
        last:
          description: The range's last IP address.
          type: string
      required:
      - first
      - last
    RegionSubnet:
      description: A region/subnet map.
      example:
        value: value
        key: key
      properties:
        key:
          description: The region key.
          type: string
        value:
          description: The subnet ID.
          type: string
    Team:
      description: A Kowabunga users team.
      example:
        name: name
        description: description
        id: id
        users:
        - users
        - users
      properties:
        id:
          description: The Kowabunga users team ID (auto-generated).
          type: string
        name:
          description: The Kowabunga users team name.
          type: string
        description:
          description: The Kowabunga users team description.
          type: string
        users:
          description: List of user IDs that are part of the team.
          items:
            type: string
          type: array
      required:
      - name
      - users
    Template:
      description: A image template.
      example:
        os: linux
        name: name
        description: description
        id: id
        source: source
      properties:
        id:
          description: The image template ID (auto-generated).
          type: string
        name:
          description: The image template name.
          type: string
        description:
          description: The image template description.
          type: string
        os:
          default: linux
          description: Type of operating system if OS kind (useful to determine cloud-init
            parameters for instance).
          enum:
          - linux
          - windows
          type: string
        source:
          description: HTTP(s) source URL of the KVM-ready OS image.
          type: string
      required:
      - name
      - source
    ApiToken:
      description: A Kowabunga authentication security token consists of an API key
        granting access to resources.
      example:
        expire: false
        name: name
        description: description
        id: id
        expiration_date: 2000-01-23
      properties:
        id:
          description: The server-to-server authentication security token ID (auto-generated).
          type: string
        name:
          description: The server-to-server authentication security token name.
          type: string
        description:
          description: The server-to-server authentication security token description.
          type: string
        expire:
          default: false
          description: Does the API token expires at some stage ?.
          type: boolean
        expiration_date:
          description: Expiration date of the token (YYYY-MM-DD format).
          format: date
          type: string
      required:
      - expire
      - name
    User:
      description: A Kowabunga user.
      example:
        role: superAdmin
        name: name
        description: description
        id: id
        email: email
        notifications: false
      properties:
        id:
          description: The Kowabunga user ID (auto-generated).
          type: string
        name:
          description: The Kowabunga user name.
          type: string
        description:
          description: The Kowabunga user description.
          type: string
        email:
          description: User email address.
          type: string
        role:
          description: The Kowabunga user role.
          enum:
          - superAdmin
          - projectAdmin
          - user
          type: string
        notifications:
          default: false
          description: Whether or not to receive email notifications on events.
          type: boolean
      required:
      - email
      - name
      - role
    UserCredentials:
      description: A Kowabunga user login credentials.
      example:
        password: password
        jwt: jwt
        email: email
      properties:
        email:
          description: The user email address for login.
          type: string
        password:
          description: The user password for login.
          type: string
        jwt:
          description: The resulting server-generated JWT token for Bearer Authentication
            (read-only).
          type: string
      required:
      - email
      - password
    UserEmail:
      description: A Kowabunga user email.
      example:
        email: email
      properties:
        email:
          description: The user email address used for login.
          type: string
      required:
      - email
    VNet:
      description: A virtual network.
      example:
        private: true
        vlan: 0
        name: name
        description: description
        id: id
        interface: interface
      properties:
        id:
          description: The virtual network ID (auto-generated).
          type: string
        name:
          description: The virtual network name.
          type: string
        description:
          description: The virtual network description.
          type: string
        vlan:
          description: The VLAN identifier (0 if unspecified).
          format: int64
          type: integer
        interface:
          description: The libvirt's bridge network interface (brX).
          type: string
        private:
          default: true
          description: Is the virtual network adapter connected to private (LAN) or
            public (WAN) physical network ?.
          type: boolean
      required:
      - interface
      - name
    Volume:
      description: A storage volume.
      example:
        size: 0
        name: name
        description: description
        id: id
        type: os
      properties:
        id:
          description: The storage volume ID (auto-generated).
          type: string
        name:
          description: The storage volume name.
          type: string
        description:
          description: The storage volume description.
          type: string
        type:
          description: The storage volume type.
          enum:
          - os
          - iso
          - raw
          type: string
        size:
          description: The storage volume size (in bytes).
          format: int64
          type: integer
      required:
      - name
      - size
      - type
    Zone:
      description: A availability zone.
      example:
        name: name
        description: description
        id: id
      properties:
        id:
          description: The availability zone ID (auto-generated).
          type: string
        name:
          description: The availability zone name.
          type: string
        description:
          description: The availability zone description.
          type: string
      required:
      - name
  securitySchemes:
    ApiKeyAuth:
      description: API key to authorize machine-to-machine requests.
      in: header
      name: X-API-Key
      type: apiKey
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
