---
# Copyright (c) The Kowabunga Project
# Apache License, Version 2.0 (see LICENSE or https://www.apache.org/licenses/LICENSE-2.0.txt)
# SPDX-License-Identifier: Apache-2.0

{%- import "src/oas.macros.yml.j2" as oas with context %}

components:
  schemas:
{{ oas.SchemaBaseResource(resources.instance, ['name', 'memory', 'vcpus']) }}
{{ oas.IntProperty('memory', 'The ' + resources.instance.desc + ' memory size (in bytes)') }}
{{ oas.IntProperty('vcpus', 'The ' + resources.instance.desc + ' number of vCPUs') }}
{{ oas.StringArrayProperty('adapters', 'a list of existing network adapters to be connected to the instance') }}
{{ oas.StringArrayProperty('volumes', 'volumes list of existing storage volumes (i.e. disks) to be connected to the instance') }}

{{ oas.Schema(resources.instance_state, ['state', 'reason']) }}
{{ oas.StringProperty('state', 'The ' + resources.instance.desc + ' state') }}
{{ oas.StringProperty('reason', 'The ' + resources.instance.desc + ' reason of the state') }}

{{ oas.Schema(resources.instance_ra, ['url']) }}
{{ oas.StringProperty('url', 'The ' + resources.instance.desc + ' remote access URL') }}

  parameters:
{{ oas.PathParamID(resources.instance) }}

paths:
  /instance:
{{ oas.List(resources.instance, [resources.instance.tag]) }}

  /instance/{{ '{' + resources.instance.paramId + '}' }}:
{{ oas.RUD(resources.instance, [resources.instance.tag], [resources.instance.paramSchema]) }}

  /instance/{{ '{' + resources.instance.paramId + '}' }}/state:
{{ oas.Parameters([resources.instance.paramSchema]) }}
{{ oas.Read('ReadInstanceState', resources.instance_state.schema, resources.instance_state.desc, [resources.instance.tag]) }}

  /instance/{{ '{' + resources.instance.paramId + '}' }}/reboot:
{{ oas.Parameters([resources.instance.paramSchema]) }}
{{ oas.Patch('RebootInstance', resources.instance.desc, 'software reboot', [resources.instance.tag]) }}

  /instance/{{ '{' + resources.instance.paramId + '}' }}/reset:
{{ oas.Parameters([resources.instance.paramSchema]) }}
{{ oas.Patch('ResetInstance', resources.instance.desc, 'hardware reset', [resources.instance.tag]) }}

  /instance/{{ '{' + resources.instance.paramId + '}' }}/suspend:
{{ oas.Parameters([resources.instance.paramSchema]) }}
{{ oas.Patch('SuspendInstance', resources.instance.desc, 'software PM suspend', [resources.instance.tag]) }}

  /instance/{{ '{' + resources.instance.paramId + '}' }}/resume:
{{ oas.Parameters([resources.instance.paramSchema]) }}
{{ oas.Patch('ResumeInstance', resources.instance.desc, 'software PM resume', [resources.instance.tag]) }}

  /instance/{{ '{' + resources.instance.paramId + '}' }}/start:
{{ oas.Parameters([resources.instance.paramSchema]) }}
{{ oas.Patch('StartInstance', resources.instance.desc, 'hardware boot-up', [resources.instance.tag]) }}

  /instance/{{ '{' + resources.instance.paramId + '}' }}/stop:
{{ oas.Parameters([resources.instance.paramSchema]) }}
{{ oas.Patch('StopInstance', resources.instance.desc, 'hardware stop', [resources.instance.tag]) }}

  /instance/{{ '{' + resources.instance.paramId + '}' }}/shutdown:
{{ oas.Parameters([resources.instance.paramSchema]) }}
{{ oas.Patch('ShutdownInstance', resources.instance.desc, 'software shutdown', [resources.instance.tag]) }}

  /instance/{{ '{' + resources.instance.paramId + '}' }}/connect:
{{ oas.Parameters([resources.instance.paramSchema]) }}
{{ oas.Read('ReadInstanceRemoteConnection', resources.instance_ra.schema, resources.instance_ra.desc, [resources.instance.tag]) }}
