---
# Copyright (c) The Kowabunga Project
# Apache License, Version 2.0 (see LICENSE or https://www.apache.org/licenses/LICENSE-2.0.txt)
# SPDX-License-Identifier: Apache-2.0

{%- import "src/oas.macros.yml.j2" as oas with context %}

components:
  schemas:
{{ oas.SchemaBaseResource(resources.kaktus, ['name', 'agents']) }}
{{ oas.ObjectProperty('cpu_cost', "Cost associated to the Kaktus node's CPU resources", resources.cost.schema) }}
{{ oas.ObjectProperty('memory_cost', "Cost associated to the Kaktus node's memory resources", resources.cost.schema) }}
{{ oas.IntProperty('overcommit_cpu_ratio', 'The Kaktus node CPU resource over-commit ratio. Overcommitting CPU resources for VMs means allocating more virtual CPUs (vCPUs) to the virtual machines (VMs) than the physical cores available on the node. This can help optimize the utilization of the node CPU and increase the density of VMs per node', default=3) }}
{{ oas.IntProperty('overcommit_memory_ratio', 'The Kaktus node memory resource over-commit ratio. Memory overcommitment is a concept in computing that covers the assignment of more memory to virtual computing devices (or processes) than the physical machine they are hosted, or running on, actually has', default=2) }}
{{ oas.StringArrayProperty('agents', 'a list of existing remote agents managing the Kaktus node') }}

{{ oas.Schema(resources.kaktus_caps, ['cpu', 'memory']) }}
{{ oas.ObjectProperty('cpu', 'The ' + resources.kaktus.desc + ' CPU characteristics', resources.kaktus_cpu.schema) }}
{{ oas.IntProperty('memory', 'The ' + resources.kaktus.desc + ' memory size (bytes)') }}

{{ oas.Schema(resources.kaktus_cpu, ['arch', 'model', 'vendor', 'sockets', 'cores', 'threads']) }}
{{ oas.StringProperty('arch', 'The ' + resources.kaktus.desc + ' CPU architecture') }}
{{ oas.StringProperty('model', 'The ' + resources.kaktus.desc + ' CPU model') }}
{{ oas.StringProperty('vendor', 'The ' + resources.kaktus.desc + ' CPU vendor') }}
{{ oas.IntProperty('sockets', 'The ' + resources.kaktus.desc + ' CPU number of sockets') }}
{{ oas.IntProperty('cores', 'The ' + resources.kaktus.desc + ' CPU number of cores') }}
{{ oas.IntProperty('threads', 'The ' + resources.kaktus.desc + ' CPU number of threads') }}

  parameters:
{{ oas.PathParamID(resources.kaktus) }}

paths:
  /kaktus:
{{ oas.List(resources.kaktus, [resources.kaktus.tag]) }}

  /kaktus/{{ '{' + resources.kaktus.paramId + '}' }}:
{{ oas.RUD(resources.kaktus, [resources.kaktus.tag], [resources.kaktus.paramSchema]) }}

  /kaktus/{{ '{' + resources.kaktus.paramId + '}' }}/caps:
{{ oas.Parameters([resources.kaktus.paramSchema]) }}
{{ oas.Read('ReadKaktusCaps', resources.kaktus_caps.schema, resources.kaktus_caps.desc, [resources.kaktus.tag]) }}

  /kaktus/{{ '{' + resources.kaktus.paramId + '}' }}/instances:
{{ oas.Parameters([resources.kaktus.paramSchema]) }}
{{ oas.GetAll('List' + resources.kaktus.schema + resources.instance.schema + 's', resources.instance.desc, [resources.kaktus.tag, resources.instance.tag], True) }}
